File: echo.test
Build ID: 5c55fcc1b7b62683b68df8db11ac725d2c35fcea
Type: cpu
Time: 2025-10-03 10:04:59 -03
Duration: 58.84s, Total samples = 74.80s (127.12%)
Showing nodes accounting for 60.38s, 80.72% of 74.80s total
Dropped 477 nodes (cum <= 0.37s)
      flat  flat%   sum%        cum   cum%
     4.48s  5.99%  5.99%      4.48s  5.99%  runtime.futex
     3.53s  4.72% 10.71%      3.53s  4.72%  runtime.memclrNoHeapPointers
     3.32s  4.44% 15.15%      3.32s  4.44%  runtime.nextFreeFast (inline)
     3.07s  4.10% 19.25%      4.59s  6.14%  internal/runtime/maps.(*Iter).Next
     2.48s  3.32% 22.57%     20.62s 27.57%  runtime.mallocgcSmallScanNoHeader
     2.33s  3.11% 25.68%      2.42s  3.24%  runtime.(*mspan).writeHeapBitsSmall
     2.27s  3.03% 28.72%      2.30s  3.07%  net/textproto.validHeaderFieldByte (inline)
     2.22s  2.97% 31.68%      2.57s  3.44%  runtime.typePointers.next
     2.10s  2.81% 34.49%      6.64s  8.88%  runtime.scanobject
     1.54s  2.06% 36.55%     26.88s 35.94%  runtime.mallocgc
     1.32s  1.76% 38.32%      3.63s  4.85%  net/textproto.CanonicalMIMEHeaderKey
     1.31s  1.75% 40.07%      1.31s  1.75%  internal/chacha8rand.block
     1.14s  1.52% 41.59%      1.81s  2.42%  runtime.findObject
     1.12s  1.50% 43.09%      1.12s  1.50%  aeshashbody
     0.90s  1.20% 44.29%      0.90s  1.20%  internal/runtime/maps.(*groupReference).key (inline)
     0.86s  1.15% 45.44%      1.16s  1.55%  github.com/labstack/echo/v4.(*Router).Find
     0.84s  1.12% 46.56%      0.84s  1.12%  runtime.tgkill
     0.82s  1.10% 47.66%      0.82s  1.10%  runtime.bool2int (inline)
     0.80s  1.07% 48.73%      0.80s  1.07%  runtime.releasem (inline)
     0.75s  1.00% 49.73%      1.10s  1.47%  runtime.scanblock
     0.65s  0.87% 50.60%      0.65s  0.87%  internal/runtime/atomic.(*Uint32).Add (inline)
     0.65s  0.87% 51.47%      0.65s  0.87%  runtime.(*mspan).base (inline)
     0.61s  0.82% 52.29%      0.62s  0.83%  runtime.traceAcquireEnabled
     0.58s  0.78% 53.06%     16.57s 22.15%  net/http.Header.Clone (inline)
     0.58s  0.78% 53.84%     12.52s 16.74%  runtime.mapassign_faststr
     0.56s  0.75% 54.59%      0.56s  0.75%  runtime.typePointers.nextFast (inline)
     0.55s  0.74% 55.32%      0.55s  0.74%  runtime.(*fixalloc).alloc
     0.54s  0.72% 56.04%      2.38s  3.18%  internal/runtime/maps.(*Iter).Init
     0.54s  0.72% 56.76%      0.54s  0.72%  runtime.acquirem (inline)
     0.49s  0.66% 57.42%      0.78s  1.04%  runtime.(*spanSet).push
     0.48s  0.64% 58.06%      3.15s  4.21%  runtime.mallocgcSmallNoscan
     0.48s  0.64% 58.70%      2.07s  2.77%  runtime.rand
     0.46s  0.61% 59.32%      0.46s  0.61%  runtime.madvise
     0.46s  0.61% 59.93%      3.42s  4.57%  runtime.sweepone
     0.46s  0.61% 60.55%      1.55s  2.07%  runtime.wbBufFlush1
     0.45s   0.6% 61.15%      0.46s  0.61%  runtime.spanOf (inline)
     0.44s  0.59% 61.74%      2.58s  3.45%  runtime.(*sweepLocked).sweep
     0.43s  0.57% 62.31%      0.43s  0.57%  runtime.(*mspan).init
     0.42s  0.56% 62.87%      0.42s  0.56%  runtime.memmove
     0.39s  0.52% 63.40%      0.39s  0.52%  runtime.nanotime (inline)
     0.38s  0.51% 63.90%      0.44s  0.59%  runtime.step
     0.35s  0.47% 64.37%      0.65s  0.87%  sync.(*Pool).Get
     0.33s  0.44% 64.81%      0.82s  1.10%  sync.(*Pool).Put
     0.32s  0.43% 65.24%      0.64s  0.86%  sync.(*Pool).pin
     0.31s  0.41% 65.66%     49.79s 66.56%  github.com/labstack/echo/v4.(*Echo).ServeHTTP
     0.31s  0.41% 66.07%      1.20s  1.60%  internal/runtime/maps.(*Map).putSlotSmallFastStr
     0.31s  0.41% 66.48%      0.39s  0.52%  runtime.(*spanSet).reset
     0.30s   0.4% 66.89%      1.64s  2.19%  gcWriteBarrier
     0.30s   0.4% 67.29%     11.26s 15.05%  runtime.newobject
     0.29s  0.39% 67.67%      1.16s  1.55%  runtime.(*mheap).initSpan
     0.28s  0.37% 68.05%     42.46s 56.76%  github.com/labstack/echo/v4.(*Echo).add.func1
     0.27s  0.36% 68.41%      2.48s  3.32%  runtime.(*mheap).allocSpan
     0.27s  0.36% 68.77%      0.68s  0.91%  runtime.(*unwinder).resolveInternal
     0.26s  0.35% 69.12%      2.27s  3.03%  internal/runtime/maps.rand
     0.24s  0.32% 69.44%      2.66s  3.56%  runtime.heapSetTypeNoHeader (inline)
     0.24s  0.32% 69.76%      0.77s  1.03%  runtime.pcvalue
     0.23s  0.31% 70.07%      0.57s  0.76%  github.com/labstack/echo/v4.(*context).Reset (inline)
     0.22s  0.29% 70.36%      8.39s 11.22%  github.com/labstack/echo/v4.(*Response).Write
     0.21s  0.28% 70.64%      9.68s 12.94%  internal/runtime/maps.(*Map).growToSmall
     0.21s  0.28% 70.92%      0.71s  0.95%  runtime.greyobject
     0.21s  0.28% 71.20%      4.98s  6.66%  runtime.makeslice
     0.20s  0.27% 71.47%      0.61s  0.82%  runtime.lock2
     0.19s  0.25% 71.72%      2.36s  3.16%  net/textproto.MIMEHeader.Get
     0.18s  0.24% 71.97%      5.06s  6.76%  runtime.mapIterStart
     0.17s  0.23% 72.19%      2.44s  3.26%  bytes.(*Buffer).Write
     0.17s  0.23% 72.42%     10.73s 14.34%  encoding/json.(*Encoder).Encode
     0.16s  0.21% 72.63%      0.52s   0.7%  runtime.mapaccess1_faststr
     0.15s   0.2% 72.83%     19.45s 26.00%  github.com/labstack/echo/v4.(*context).Blob
     0.14s  0.19% 73.02%      2.07s  2.77%  bytes.(*Buffer).grow
     0.14s  0.19% 73.21%      1.20s  1.60%  encoding/json.(*Decoder).refill
     0.14s  0.19% 73.40%     16.90s 22.59%  github.com/labstack/echo/v4.(*Response).WriteHeader
     0.14s  0.19% 73.58%      0.66s  0.88%  github.com/labstack/echo/v4.applyMiddleware
     0.14s  0.19% 73.77%     16.76s 22.41%  net/http/httptest.(*ResponseRecorder).WriteHeader
     0.14s  0.19% 73.96%     10.96s 14.65%  net/textproto.MIMEHeader.Set (inline)
     0.14s  0.19% 74.14%      0.53s  0.71%  runtime.(*spanSet).pop
     0.13s  0.17% 74.32%      0.90s  1.20%  runtime.(*gcControllerState).update
     0.13s  0.17% 74.49%      6.06s  8.10%  runtime.(*mcache).refill
     0.13s  0.17% 74.67%      0.72s  0.96%  runtime.gcmarknewobject
     0.12s  0.16% 74.83%      2.10s  2.81%  encoding/json.mapEncoder.encode
     0.12s  0.16% 74.99%      0.60s   0.8%  encoding/json.structEncoder.encode
     0.12s  0.16% 75.15%     14.37s 19.21%  github.com/labstack/echo/v4.(*context).json
     0.12s  0.16% 75.31%      0.83s  1.11%  runtime.(*mheap).freeSpanLocked
     0.12s  0.16% 75.47%      0.43s  0.57%  runtime.typedslicecopy
     0.11s  0.15% 75.61%     15.28s 20.43%  github.com/labstack/echo/v4.(*context).JSON
     0.11s  0.15% 75.76%      9.78s 13.07%  github.com/labstack/echo/v4.(*context).writeContentType
     0.10s  0.13% 75.90%     10.33s 13.81%  benchmarks/echo.BenchmarkStaticRoute.func1
     0.10s  0.13% 76.03%      0.92s  1.23%  runtime.makeSpanClass (inline)
     0.10s  0.13% 76.16%      9.23s 12.34%  runtime.newarray
     0.09s  0.12% 76.28%     12.18s 16.28%  benchmarks/echo.BenchmarkDynamicRoute
     0.09s  0.12% 76.40%     12.58s 16.82%  benchmarks/echo.BenchmarkTypedJSON
     0.09s  0.12% 76.52%      3.39s  4.53%  encoding/json.(*encodeState).marshal
     0.09s  0.12% 76.64%      3.17s  4.24%  encoding/json.(*encodeState).reflectValue
     0.09s  0.12% 76.76%      3.59s  4.80%  github.com/labstack/echo/v4.(*DefaultBinder).BindBody
     0.09s  0.12% 76.89%     20.69s 27.66%  github.com/labstack/echo/v4.(*context).String
     0.09s  0.12% 77.01%      2.41s  3.22%  net/http/httptest.(*ResponseRecorder).Write
     0.09s  0.12% 77.13%      6.28s  8.40%  runtime.(*mcache).nextFree
     0.09s  0.12% 77.25%      1.53s  2.05%  runtime.deductAssistCredit
     0.08s  0.11% 77.35%      1.35s  1.80%  encoding/json.(*Decoder).readValue
     0.08s  0.11% 77.46%      0.77s  1.03%  github.com/labstack/echo/v4.(*context).QueryParams (inline)
     0.08s  0.11% 77.57%      1.39s  1.86%  internal/chacha8rand.(*State).Refill
     0.08s  0.11% 77.67%      1.01s  1.35%  runtime.rawbyteslice
     0.08s  0.11% 77.78%      1.15s  1.54%  runtime.stringtoslicebyte
     0.07s 0.094% 77.87%      2.10s  2.81%  github.com/labstack/echo/v4.DefaultJSONSerializer.Deserialize
     0.07s 0.094% 77.97%      5.35s  7.15%  net/http/httptest.NewRecorder (inline)
     0.07s 0.094% 78.06%      0.65s  0.87%  runtime.convTstring
     0.07s 0.094% 78.16%      0.66s  0.88%  runtime.forEachPInternal
     0.07s 0.094% 78.25%      1.56s  2.09%  runtime.mapIterNext
     0.06s  0.08% 78.33%      3.81s  5.09%  github.com/labstack/echo/v4.(*DefaultBinder).Bind
     0.06s  0.08% 78.41%      2.10s  2.81%  internal/runtime/maps.NewMap
     0.06s  0.08% 78.49%      9.29s 12.42%  internal/runtime/maps.newarray
     0.06s  0.08% 78.57%     18.48s 24.71%  runtime.systemstack
     0.05s 0.067% 78.64%     10.08s 13.48%  benchmarks/echo.BenchmarkDynamicRoute.func1
     0.05s 0.067% 78.70%     10.51s 14.05%  benchmarks/echo.BenchmarkMiddleware.func2
     0.05s 0.067% 78.77%      4.31s  5.76%  runtime.(*mcentral).cacheSpan
     0.05s 0.067% 78.84%      8.11s 10.84%  runtime.gcDrain
     0.04s 0.053% 78.89%     17.41s 23.28%  benchmarks/echo.BenchmarkMiddleware
     0.04s 0.053% 78.94%     13.29s 17.77%  benchmarks/echo.BenchmarkStaticRoute
     0.04s 0.053% 79.00%     10.80s 14.44%  github.com/labstack/echo/v4.DefaultJSONSerializer.Serialize
     0.04s 0.053% 79.05%      0.71s  0.95%  runtime.(*mcentral).uncacheSpan
     0.04s 0.053% 79.10%      2.14s  2.86%  runtime.makemap
     0.04s 0.053% 79.16%      3.09s  4.13%  runtime.makemap_small
     0.04s 0.053% 79.21%      0.52s   0.7%  runtime.newMarkBits
     0.04s 0.053% 79.26%      4.02s  5.37%  runtime.schedule
     0.03s  0.04% 79.30%     11.19s 14.96%  benchmarks/echo.BenchmarkTypedJSON.func1
     0.03s  0.04% 79.34%      0.46s  0.61%  encoding/json.stringEncoder
     0.03s  0.04% 79.39%      0.38s  0.51%  encoding/json.typeEncoder
     0.03s  0.04% 79.43%      0.55s  0.74%  github.com/labstack/echo/v4.NewHTTPError
     0.03s  0.04% 79.47%      9.32s 12.46%  internal/runtime/maps.newGroups (inline)
     0.03s  0.04% 79.51%      0.69s  0.92%  net/url.(*URL).Query
     0.03s  0.04% 79.55%      0.66s  0.88%  runtime.(*mspan).initHeapBits
     0.03s  0.04% 79.59%      0.40s  0.53%  runtime.(*mspan).markBitsForIndex (inline)
     0.03s  0.04% 79.63%      0.58s  0.78%  runtime.bgscavenge
     0.03s  0.04% 79.67%      2.42s  3.24%  runtime.findRunnable
     0.03s  0.04% 79.71%      1.95s  2.61%  runtime.markroot
     0.03s  0.04% 79.75%      0.86s  1.15%  runtime.preemptone
     0.03s  0.04% 79.79%      0.66s  0.88%  runtime.traceAcquire (inline)
     0.03s  0.04% 79.83%      0.55s  0.74%  runtime.traceEventWriter.event
     0.03s  0.04% 79.87%      0.43s  0.57%  runtime.traceRelease (inline)
     0.03s  0.04% 79.91%      0.52s   0.7%  runtime.traceWriter.event
     0.02s 0.027% 79.93%      0.50s  0.67%  benchmarks/echo.BenchmarkMiddleware.func1
     0.02s 0.027% 79.96%     14.13s 18.89%  benchmarks/echo.BenchmarkMiddleware.func1.1
     0.02s 0.027% 79.99%      1.41s  1.89%  encoding/json.(*Decoder).Decode
     0.02s 0.027% 80.01%      0.64s  0.86%  reflect.(*MapIter).Next
     0.02s 0.027% 80.04%      0.45s   0.6%  reflect.copyVal
     0.02s 0.027% 80.07%      0.54s  0.72%  runtime.(*gcWork).balance
     0.02s 0.027% 80.09%      0.46s  0.61%  runtime.(*mheap).nextSpanForSweep
     0.02s 0.027% 80.12%      0.70s  0.94%  runtime.(*unwinder).next
     0.02s 0.027% 80.15%      1.36s  1.82%  runtime.gcDrainN
     0.02s 0.027% 80.17%      1.38s  1.84%  runtime.gcStart
     0.02s 0.027% 80.20%      0.63s  0.84%  runtime.lock (partial-inline)
     0.02s 0.027% 80.23%      0.63s  0.84%  runtime.notesleep
     0.02s 0.027% 80.25%      3.46s  4.63%  runtime.notewakeup
     0.02s 0.027% 80.28%      0.90s  1.20%  runtime.stopm
     0.02s 0.027% 80.31%      0.41s  0.55%  runtime.traceLocker.HeapAlloc
     0.02s 0.027% 80.33%      0.66s  0.88%  runtime.tracebackPCs
     0.02s 0.027% 80.36%      1.50s  2.01%  runtime.wbBufFlush.func1
     0.01s 0.013% 80.37%      0.62s  0.83%  encoding/json.NewDecoder (inline)
     0.01s 0.013% 80.39%      3.82s  5.11%  github.com/labstack/echo/v4.(*context).Bind
     0.01s 0.013% 80.40%      3.05s  4.08%  internal/runtime/maps.NewEmptyMap (inline)
     0.01s 0.013% 80.41%     10.97s 14.67%  net/http.Header.Set (inline)
     0.01s 0.013% 80.43%      0.50s  0.67%  reflect.mapIterStart
     0.01s 0.013% 80.44%      0.50s  0.67%  runtime.(*gcControllerState).enlistWorker
     0.01s 0.013% 80.45%      2.52s  3.37%  runtime.(*mheap).alloc
     0.01s 0.013% 80.47%      2.51s  3.36%  runtime.(*mheap).alloc.func1
     0.01s 0.013% 80.48%      0.55s  0.74%  runtime.(*mheap).allocMSpanLocked
     0.01s 0.013% 80.49%      0.38s  0.51%  runtime.(*pageAlloc).free
     0.01s 0.013% 80.51%      0.55s  0.74%  runtime.(*scavengerState).run
     0.01s 0.013% 80.52%      3.46s  4.63%  runtime.bgsweep
     0.01s 0.013% 80.53%      0.71s  0.95%  runtime.callers.func1
     0.01s 0.013% 80.55%      0.41s  0.55%  runtime.finishsweep_m
     0.01s 0.013% 80.56%      0.67s   0.9%  runtime.forEachP (inline)
     0.01s 0.013% 80.57%      0.92s  1.23%  runtime.futexsleep
     0.01s 0.013% 80.59%      8.12s 10.86%  runtime.gcBgMarkWorker.func2
     0.01s 0.013% 80.60%      0.81s  1.08%  runtime.gcMarkTermination
     0.01s 0.013% 80.61%      0.64s  0.86%  runtime.mPark (inline)
     0.01s 0.013% 80.63%      1.92s  2.57%  runtime.morestack
     0.01s 0.013% 80.64%      2.22s  2.97%  runtime.newstack
     0.01s 0.013% 80.66%      0.38s  0.51%  runtime.preemptall
     0.01s 0.013% 80.67%      0.76s  1.02%  runtime.runSafePointFn
     0.01s 0.013% 80.68%      0.47s  0.63%  runtime.sysUnused (inline)
     0.01s 0.013% 80.70%      0.39s  0.52%  runtime.unlock (partial-inline)
     0.01s 0.013% 80.71%      0.38s  0.51%  runtime.unlockWithRank (inline)
     0.01s 0.013% 80.72%      1.53s  2.05%  runtime.wbBufFlush
         0     0% 80.72%      0.38s  0.51%  encoding/json.valueEncoder
         0     0% 80.72%      2.36s  3.16%  net/http.Header.Get (inline)
         0     0% 80.72%      0.66s  0.88%  net/url.ParseQuery (inline)
         0     0% 80.72%      3.18s  4.25%  runtime.(*mcentral).grow
         0     0% 80.72%      1.04s  1.39%  runtime.(*mheap).freeSpan (inline)
         0     0% 80.72%      0.53s  0.71%  runtime.(*pageAlloc).scavenge
         0     0% 80.72%      0.53s  0.71%  runtime.(*pageAlloc).scavenge.func1
         0     0% 80.72%      0.53s  0.71%  runtime.(*pageAlloc).scavengeOne
         0     0% 80.72%      0.54s  0.72%  runtime.(*scavengerState).init.func2
         0     0% 80.72%      1.04s  1.39%  runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func2
         0     0% 80.72%      0.71s  0.95%  runtime.callers
         0     0% 80.72%      0.41s  0.55%  runtime.funcspdelta (inline)
         0     0% 80.72%      3.57s  4.77%  runtime.futexwakeup
         0     0% 80.72%      1.44s  1.93%  runtime.gcAssistAlloc
         0     0% 80.72%      1.42s  1.90%  runtime.gcAssistAlloc.func2
         0     0% 80.72%      1.42s  1.90%  runtime.gcAssistAlloc1
         0     0% 80.72%      9.80s 13.10%  runtime.gcBgMarkWorker
         0     0% 80.72%      7.89s 10.55%  runtime.gcDrainMarkWorkerDedicated (inline)
         0     0% 80.72%      1.63s  2.18%  runtime.gcMarkDone
         0     0% 80.72%      0.49s  0.66%  runtime.gcMarkDone.forEachP.func5
         0     0% 80.72%      0.39s  0.52%  runtime.gcMarkTermination.func3
         0     0% 80.72%      0.41s  0.55%  runtime.gcStart.func3
         0     0% 80.72%      0.79s  1.06%  runtime.gcStart.func4
         0     0% 80.72%      2.02s  2.70%  runtime.gopreempt_m (inline)
         0     0% 80.72%      2.05s  2.74%  runtime.goschedImpl
         0     0% 80.72%      0.61s  0.82%  runtime.lockWithRank (inline)
         0     0% 80.72%      0.82s  1.10%  runtime.mProf_Malloc
         0     0% 80.72%      0.83s  1.11%  runtime.markroot.func1
         0     0% 80.72%      1.04s  1.39%  runtime.markrootBlock
         0     0% 80.72%      2.88s  3.85%  runtime.mcall
         0     0% 80.72%      2.78s  3.72%  runtime.park_m
         0     0% 80.72%      0.94s  1.26%  runtime.preemptM (inline)
         0     0% 80.72%      0.83s  1.11%  runtime.profilealloc
         0     0% 80.72%      1.40s  1.87%  runtime.resetspinning
         0     0% 80.72%      0.62s  0.83%  runtime.scanstack
         0     0% 80.72%      0.94s  1.26%  runtime.signalM
         0     0% 80.72%      1.19s  1.59%  runtime.startTheWorldWithSema
         0     0% 80.72%      2.78s  3.72%  runtime.startm
         0     0% 80.72%      0.46s  0.61%  runtime.sysUnusedOS
         0     0% 80.72%      2.84s  3.80%  runtime.wakep
         0     0% 80.72%     55.48s 74.17%  testing.(*B).launch
         0     0% 80.72%     55.52s 74.22%  testing.(*B).runN
