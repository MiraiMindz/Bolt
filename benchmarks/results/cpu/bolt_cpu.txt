File: bolt.test
Build ID: 2c92bd95e79be0e3a2fef3dea8b74d3e7928763d
Type: cpu
Time: 2025-10-03 11:57:49 -03
Duration: 60.15s, Total samples = 77.13s (128.23%)
Showing nodes accounting for 62.18s, 80.62% of 77.13s total
Dropped 434 nodes (cum <= 0.39s)
      flat  flat%   sum%        cum   cum%
     5.21s  6.75%  6.75%      5.21s  6.75%  runtime.futex
     3.66s  4.75% 11.50%      3.66s  4.75%  runtime.memclrNoHeapPointers
     3.15s  4.08% 15.58%      3.15s  4.08%  runtime.nextFreeFast (inline)
     2.56s  3.32% 18.90%      6.56s  8.51%  runtime.scanobject
     2.47s  3.20% 22.11%      3.39s  4.40%  internal/runtime/maps.(*Iter).Next
     2.35s  3.05% 25.15%     20.70s 26.84%  runtime.mallocgcSmallScanNoHeader
     2.15s  2.79% 27.94%      2.28s  2.96%  runtime.(*mspan).writeHeapBitsSmall
     1.88s  2.44% 30.38%      2.08s  2.70%  runtime.typePointers.next
     1.52s  1.97% 32.35%      1.57s  2.04%  net/textproto.validHeaderFieldByte (inline)
     1.48s  1.92% 34.27%     27.11s 35.15%  runtime.mallocgc
     1.37s  1.78% 36.04%      1.37s  1.78%  internal/chacha8rand.block
     1.25s  1.62% 37.66%      1.80s  2.33%  runtime.findObject
     1.22s  1.58% 39.25%      1.22s  1.58%  aeshashbody
     1.22s  1.58% 40.83%     50.30s 65.21%  bolt.(*App).ServeHTTP
     1.07s  1.39% 42.21%      1.07s  1.39%  runtime.tgkill
     0.96s  1.24% 43.46%      2.54s  3.29%  net/textproto.CanonicalMIMEHeaderKey
     0.96s  1.24% 44.70%      0.96s  1.24%  runtime.memmove
     0.92s  1.19% 45.90%      4.06s  5.26%  runtime.sweepone
     0.77s     1% 46.89%      0.77s     1%  runtime.(*mspan).init
     0.75s  0.97% 47.87%     16.40s 21.26%  net/http.Header.Clone (inline)
     0.74s  0.96% 48.83%      0.74s  0.96%  runtime.acquirem (inline)
     0.72s  0.93% 49.76%      0.72s  0.93%  internal/runtime/maps.h2 (inline)
     0.70s  0.91% 50.67%      1.90s  2.46%  fmt.(*pp).doPrintf
     0.68s  0.88% 51.55%      0.68s  0.88%  runtime.bool2int (inline)
     0.68s  0.88% 52.43%     13.60s 17.63%  runtime.mapassign_faststr
     0.67s  0.87% 53.30%      1.04s  1.35%  runtime.scanblock
     0.66s  0.86% 54.16%      3.57s  4.63%  bolt.(*Router).GetValue
     0.66s  0.86% 55.01%      2.42s  3.14%  internal/runtime/maps.(*Iter).Init
     0.65s  0.84% 55.85%      0.65s  0.84%  internal/runtime/maps.(*groupReference).key (inline)
     0.65s  0.84% 56.70%      0.65s  0.84%  runtime.(*fixalloc).alloc
     0.63s  0.82% 57.51%      0.63s  0.82%  runtime.(*mspan).base (inline)
     0.60s  0.78% 58.29%      2.64s  3.42%  runtime.mallocgcSmallNoscan
     0.59s  0.76% 59.06%      1.32s  1.71%  internal/runtime/maps.(*Map).getWithoutKeySmallFastStr
     0.54s   0.7% 59.76%      0.54s   0.7%  runtime.releasem (inline)
     0.53s  0.69% 60.44%      2.25s  2.92%  runtime.rand
     0.52s  0.67% 61.12%      0.52s  0.67%  internal/runtime/atomic.(*Uint32).Add (inline)
     0.51s  0.66% 61.78%      0.91s  1.18%  sync.(*Pool).Put
     0.49s  0.64% 62.41%      0.49s  0.64%  internal/runtime/syscall.Syscall6
     0.48s  0.62% 63.04%      2.49s  3.23%  runtime.(*sweepLocked).sweep
     0.47s  0.61% 63.65%      0.48s  0.62%  runtime.traceAcquireEnabled
     0.46s   0.6% 64.24%      0.88s  1.14%  runtime.(*spanSet).push
     0.46s   0.6% 64.84%      1.17s  1.52%  runtime.wbBufFlush1
     0.43s  0.56% 65.40%      0.44s  0.57%  runtime.(*spanSet).reset
     0.42s  0.54% 65.94%      1.25s  1.62%  bolt.(*ContextPool).Release
     0.42s  0.54% 66.49%      0.45s  0.58%  runtime.spanOf (inline)
     0.31s   0.4% 66.89%      6.48s  8.40%  runtime.(*mcache).refill
     0.30s  0.39% 67.28%      1.55s  2.01%  internal/runtime/maps.(*Map).putSlotSmallFastStr
     0.30s  0.39% 67.66%      0.63s  0.82%  runtime.(*unwinder).resolveInternal
     0.30s  0.39% 68.05%      0.58s  0.75%  runtime.mallocgcTiny
     0.30s  0.39% 68.44%     10.74s 13.92%  runtime.newobject
     0.30s  0.39% 68.83%      0.61s  0.79%  sync.(*Pool).pin
     0.26s  0.34% 69.17%      4.90s  6.35%  runtime.mapIterStart
     0.26s  0.34% 69.51%      0.74s  0.96%  runtime.pcvalue
     0.26s  0.34% 69.84%      2.27s  2.94%  runtime.stringtoslicebyte
     0.26s  0.34% 70.18%      0.62s   0.8%  sync.(*Pool).Get
     0.25s  0.32% 70.50%      1.85s  2.40%  runtime.rawbyteslice
     0.23s   0.3% 70.80%     13.73s 17.80%  bolt.(*Context).Bytes
     0.23s   0.3% 71.10%      0.60s  0.78%  fmt.(*buffer).writeString (inline)
     0.23s   0.3% 71.40%      2.48s  3.22%  internal/runtime/maps.rand
     0.23s   0.3% 71.70%     16.68s 21.63%  net/http/httptest.(*ResponseRecorder).WriteHeader
     0.22s  0.29% 71.98%      0.80s  1.04%  fmt.(*pp).printArg
     0.22s  0.29% 72.27%      1.42s  1.84%  runtime.(*mheap).initSpan
     0.22s  0.29% 72.55%      2.50s  3.24%  runtime.heapSetTypeNoHeader (inline)
     0.22s  0.29% 72.84%      0.48s  0.62%  runtime.unlock2
     0.21s  0.27% 73.11%      2.88s  3.73%  net/http/httptest.(*ResponseRecorder).Write
     0.20s  0.26% 73.37%      0.77s     1%  runtime.(*spanSet).pop
     0.20s  0.26% 73.63%      0.64s  0.83%  runtime.lock2
     0.20s  0.26% 73.89%     10.31s 13.37%  runtime.newarray
     0.19s  0.25% 74.13%      2.13s  2.76%  bytes.(*Buffer).grow
     0.19s  0.25% 74.38%      1.54s  2.00%  runtime.mapaccess1_faststr
     0.17s  0.22% 74.60%      1.16s  1.50%  gcWriteBarrier
     0.17s  0.22% 74.82%      0.43s  0.56%  runtime.typedslicecopy
     0.16s  0.21% 75.03%      2.61s  3.38%  bytes.(*Buffer).Write
     0.15s  0.19% 75.22%     17.95s 23.27%  bolt.(*Context).String
     0.15s  0.19% 75.42%      0.87s  1.13%  runtime.(*mheap).freeSpanLocked
     0.15s  0.19% 75.61%      3.74s  4.85%  runtime.makeslice
     0.14s  0.18% 75.79%     10.59s 13.73%  internal/runtime/maps.(*Map).growToSmall
     0.14s  0.18% 75.98%     12.23s 15.86%  net/textproto.MIMEHeader.Set (inline)
     0.13s  0.17% 76.14%      2.71s  3.51%  runtime.(*mheap).allocSpan
     0.13s  0.17% 76.31%      0.67s  0.87%  runtime.greyobject
     0.12s  0.16% 76.47%      4.63s  6.00%  runtime.(*mcentral).cacheSpan
     0.12s  0.16% 76.62%      3.83s  4.97%  runtime.makemap_small
     0.11s  0.14% 76.77%      5.62s  7.29%  bolt.(*Context).BindJSON
     0.11s  0.14% 76.91%      1.48s  1.92%  internal/chacha8rand.(*State).Refill
     0.10s  0.13% 77.04%      3.76s  4.87%  github.com/json-iterator/go.(*Iterator).ReportError
     0.10s  0.13% 77.17%      1.07s  1.39%  net/textproto.MIMEHeader.Get
     0.09s  0.12% 77.29%      2.20s  2.85%  net/url.(*URL).Query
     0.09s  0.12% 77.40%      6.73s  8.73%  runtime.(*mcache).nextFree
     0.09s  0.12% 77.52%      0.62s   0.8%  runtime.gcmarknewobject
     0.09s  0.12% 77.64%      2.13s  2.76%  runtime.makemap
     0.09s  0.12% 77.75%      0.56s  0.73%  runtime.slicebytetostring
     0.08s   0.1% 77.86%      6.35s  8.23%  bolt.(*App).PostJSON.wrapTypedHandler.func1
     0.08s   0.1% 77.96%     13.87s 17.98%  bolt.DefaultErrorHandler
     0.08s   0.1% 78.06%      0.76s  0.99%  runtime.makeSpanClass (inline)
     0.07s 0.091% 78.15%     10.38s 13.46%  internal/runtime/maps.newarray
     0.07s 0.091% 78.24%      1.24s  1.61%  runtime.mapIterNext
     0.06s 0.078% 78.32%      9.26s 12.01%  benchmarks/bolt.BenchmarkMiddleware.func1.1
     0.06s 0.078% 78.40%      8.18s 10.61%  runtime.gcDrain
     0.06s 0.078% 78.48%      1.53s  1.98%  runtime.gcStart
     0.06s 0.078% 78.56%      0.72s  0.93%  runtime.notesleep
     0.05s 0.065% 78.62%     12.57s 16.30%  benchmarks/bolt.BenchmarkMiddleware
     0.05s 0.065% 78.69%      0.40s  0.52%  bolt.(*ContextPool).Acquire (inline)
     0.05s 0.065% 78.75%      0.58s  0.75%  reflect.New
     0.05s 0.065% 78.81%      0.62s   0.8%  runtime.convTstring
     0.05s 0.065% 78.88%      1.69s  2.19%  runtime.deductAssistCredit
     0.05s 0.065% 78.94%      0.89s  1.15%  runtime.forEachPInternal
     0.05s 0.065% 79.01%      1.06s  1.37%  runtime.futexsleep
     0.05s 0.065% 79.07%      0.45s  0.58%  runtime.newMarkBits
     0.05s 0.065% 79.14%     18.71s 24.26%  runtime.systemstack
     0.04s 0.052% 79.19%     16.49s 21.38%  benchmarks/bolt.BenchmarkStaticRoute
     0.04s 0.052% 79.24%      4.50s  5.83%  github.com/json-iterator/go.(*Iterator).ReadVal
     0.04s 0.052% 79.29%      4.82s  6.25%  github.com/json-iterator/go.(*frozenConfig).Unmarshal
     0.04s 0.052% 79.35%      2.04s  2.64%  internal/runtime/maps.NewMap
     0.04s 0.052% 79.40%     10.42s 13.51%  internal/runtime/maps.newGroups (inline)
     0.04s 0.052% 79.45%      2.72s  3.53%  runtime.findRunnable
     0.04s 0.052% 79.50%      0.53s  0.69%  runtime.traceWriter.event
     0.04s 0.052% 79.55%      1.09s  1.41%  runtime.wbBufFlush.func1
     0.03s 0.039% 79.59%      6.58s  8.53%  benchmarks/bolt.BenchmarkMiddleware.func2
     0.03s 0.039% 79.63%     11.43s 14.82%  benchmarks/bolt.BenchmarkStaticRoute.func1
     0.03s 0.039% 79.67%     14.63s 18.97%  benchmarks/bolt.BenchmarkTypedJSON
     0.03s 0.039% 79.71%      5.47s  7.09%  net/http/httptest.NewRecorder (inline)
     0.03s 0.039% 79.75%      0.60s  0.78%  runtime.(*gcControllerState).enlistWorker
     0.03s 0.039% 79.79%      0.77s     1%  runtime.(*gcControllerState).update
     0.03s 0.039% 79.83%      0.74s  0.96%  runtime.(*mspan).initHeapBits
     0.03s 0.039% 79.87%      4.79s  6.21%  runtime.schedule
     0.03s 0.039% 79.90%      0.56s  0.73%  runtime.traceEventWriter.event
     0.02s 0.026% 79.93%     12.22s 15.84%  benchmarks/bolt.BenchmarkDynamicRoute
     0.02s 0.026% 79.96%      2.96s  3.84%  fmt.Errorf
     0.02s 0.026% 79.98%      2.11s  2.74%  net/url.ParseQuery (inline)
     0.02s 0.026% 80.01%      3.44s  4.46%  runtime.(*mcentral).grow
     0.02s 0.026% 80.03%      0.74s  0.96%  runtime.(*mcentral).uncacheSpan
     0.02s 0.026% 80.06%      0.70s  0.91%  runtime.(*unwinder).next
     0.02s 0.026% 80.09%      0.40s  0.52%  runtime.concatstring2
     0.02s 0.026% 80.11%      1.52s  1.97%  runtime.gcDrainN
     0.02s 0.026% 80.14%      0.50s  0.65%  runtime.traceAcquire (inline)
     0.02s 0.026% 80.16%      0.43s  0.56%  runtime.traceLocker.HeapAlloc
     0.02s 0.026% 80.19%      0.65s  0.84%  runtime.tracebackPCs
     0.02s 0.026% 80.22%      0.52s  0.67%  runtime.unlock (partial-inline)
     0.02s 0.026% 80.24%      0.50s  0.65%  runtime.unlockWithRank (inline)
     0.02s 0.026% 80.27%      1.12s  1.45%  runtime.wbBufFlush
     0.01s 0.013% 80.28%      4.21s  5.46%  github.com/json-iterator/go.(*Iterator).readObjectStart
     0.01s 0.013% 80.29%      4.22s  5.47%  github.com/json-iterator/go.(*twoFieldsStructDecoder).Decode
     0.01s 0.013% 80.31%      3.71s  4.81%  internal/runtime/maps.NewEmptyMap (inline)
     0.01s 0.013% 80.32%      1.08s  1.40%  net/http.Header.Get (inline)
     0.01s 0.013% 80.33%      0.40s  0.52%  reflect.unsafe_New
     0.01s 0.013% 80.34%      0.66s  0.86%  runtime.(*gcWork).balance
     0.01s 0.013% 80.36%      2.68s  3.47%  runtime.(*mheap).alloc
     0.01s 0.013% 80.37%      1.06s  1.37%  runtime.(*mheap).freeSpan (inline)
     0.01s 0.013% 80.38%      0.70s  0.91%  runtime.(*mheap).nextSpanForSweep
     0.01s 0.013% 80.40%      1.05s  1.36%  runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func2
     0.01s 0.013% 80.41%      0.48s  0.62%  runtime.finishsweep_m
     0.01s 0.013% 80.42%      4.21s  5.46%  runtime.futexwakeup
     0.01s 0.013% 80.44%     10.22s 13.25%  runtime.gcBgMarkWorker
     0.01s 0.013% 80.45%      1.95s  2.53%  runtime.gcMarkDone
     0.01s 0.013% 80.46%      1.08s  1.40%  runtime.gcMarkTermination
     0.01s 0.013% 80.47%      0.45s  0.58%  runtime.gcMarkTermination.func3
     0.01s 0.013% 80.49%      0.65s  0.84%  runtime.lock (inline)
     0.01s 0.013% 80.50%      0.65s  0.84%  runtime.lockWithRank (inline)
     0.01s 0.013% 80.51%      2.15s  2.79%  runtime.markroot
     0.01s 0.013% 80.53%      2.06s  2.67%  runtime.morestack
     0.01s 0.013% 80.54%      3.99s  5.17%  runtime.notewakeup
     0.01s 0.013% 80.55%      3.51s  4.55%  runtime.park_m
     0.01s 0.013% 80.57%      0.44s  0.57%  runtime.preemptall
     0.01s 0.013% 80.58%      1.12s  1.45%  runtime.signalM
     0.01s 0.013% 80.59%      1.19s  1.54%  runtime.startTheWorldWithSema
     0.01s 0.013% 80.60%      3.25s  4.21%  runtime.startm
     0.01s 0.013% 80.62%      3.31s  4.29%  runtime.wakep
         0     0% 80.62%     12.23s 15.86%  net/http.Header.Set (inline)
         0     0% 80.62%      2.66s  3.45%  runtime.(*mheap).alloc.func1
         0     0% 80.62%      0.64s  0.83%  runtime.(*mheap).allocMSpanLocked
         0     0% 80.62%      0.42s  0.54%  runtime.(*traceAdvancerState).start.func1
         0     0% 80.62%      0.41s  0.53%  runtime.(*traceStackTable).dump
         0     0% 80.62%      4.07s  5.28%  runtime.bgsweep
         0     0% 80.62%      0.77s     1%  runtime.callers
         0     0% 80.62%      0.77s     1%  runtime.callers.func1
         0     0% 80.62%      0.41s  0.53%  runtime.dumpStacksRec
         0     0% 80.62%      0.89s  1.15%  runtime.forEachP (inline)
         0     0% 80.62%      1.64s  2.13%  runtime.gcAssistAlloc
         0     0% 80.62%      1.57s  2.04%  runtime.gcAssistAlloc.func2
         0     0% 80.62%      1.57s  2.04%  runtime.gcAssistAlloc1
         0     0% 80.62%      8.19s 10.62%  runtime.gcBgMarkWorker.func2
         0     0% 80.62%      7.73s 10.02%  runtime.gcDrainMarkWorkerDedicated (inline)
         0     0% 80.62%      0.45s  0.58%  runtime.gcDrainMarkWorkerIdle (inline)
         0     0% 80.62%      0.53s  0.69%  runtime.gcMarkDone.forEachP.func5
         0     0% 80.62%      0.48s  0.62%  runtime.gcStart.func3
         0     0% 80.62%      0.75s  0.97%  runtime.gcStart.func4
         0     0% 80.62%      2.19s  2.84%  runtime.gopreempt_m (inline)
         0     0% 80.62%      2.24s  2.90%  runtime.goschedImpl
         0     0% 80.62%      0.72s  0.93%  runtime.mPark (inline)
         0     0% 80.62%      0.87s  1.13%  runtime.mProf_Malloc
         0     0% 80.62%      1.09s  1.41%  runtime.markroot.func1
         0     0% 80.62%      0.93s  1.21%  runtime.markrootBlock
         0     0% 80.62%      3.61s  4.68%  runtime.mcall
         0     0% 80.62%      2.41s  3.12%  runtime.newstack
         0     0% 80.62%      1.12s  1.45%  runtime.preemptM (inline)
         0     0% 80.62%         1s  1.30%  runtime.preemptone
         0     0% 80.62%      0.89s  1.15%  runtime.profilealloc
         0     0% 80.62%      1.83s  2.37%  runtime.resetspinning
         0     0% 80.62%      0.79s  1.02%  runtime.runSafePointFn
         0     0% 80.62%      0.84s  1.09%  runtime.scanstack
         0     0% 80.62%      0.97s  1.26%  runtime.stopm
         0     0% 80.62%      0.42s  0.54%  runtime.traceAdvance
         0     0% 80.62%     55.95s 72.54%  testing.(*B).launch
         0     0% 80.62%     55.97s 72.57%  testing.(*B).runN
