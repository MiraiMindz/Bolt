File: bolt.test
Build ID: e6ce98160211b8c6acc755e66a33908ae755356e
Type: cpu
Time: 2025-10-03 10:02:53 -03
Duration: 62.54s, Total samples = 76.47s (122.28%)
Showing nodes accounting for 61.49s, 80.41% of 76.47s total
Dropped 451 nodes (cum <= 0.38s)
      flat  flat%   sum%        cum   cum%
     4.11s  5.37%  5.37%      4.11s  5.37%  runtime.futex
     4.06s  5.31% 10.68%      4.06s  5.31%  runtime.nextFreeFast (inline)
     3.35s  4.38% 15.06%      3.35s  4.38%  runtime.memclrNoHeapPointers
     3.23s  4.22% 19.29%      4.72s  6.17%  internal/runtime/maps.(*Iter).Next
     3.16s  4.13% 23.42%     21.96s 28.72%  runtime.mallocgcSmallScanNoHeader
     2.48s  3.24% 26.66%      2.61s  3.41%  runtime.(*mspan).writeHeapBitsSmall
     2.15s  2.81% 29.48%      2.28s  2.98%  runtime.typePointers.next
     2.06s  2.69% 32.17%      6.08s  7.95%  runtime.scanobject
     2.05s  2.68% 34.85%     28.78s 37.64%  runtime.mallocgc
     1.62s  2.12% 36.97%      1.62s  2.12%  internal/chacha8rand.block
     1.47s  1.92% 38.89%      1.47s  1.92%  aeshashbody
     1.40s  1.83% 40.72%      1.42s  1.86%  net/textproto.validHeaderFieldByte (inline)
     1.29s  1.69% 42.41%      1.29s  1.69%  runtime.acquirem (inline)
     1.01s  1.32% 43.73%      1.01s  1.32%  runtime.bool2int (inline)
        1s  1.31% 45.04%      1.66s  2.17%  runtime.findObject
     0.99s  1.29% 46.33%      0.99s  1.29%  internal/runtime/maps.(*groupReference).key (inline)
     0.81s  1.06% 47.39%     53.31s 69.71%  bolt.(*App).ServeHTTP
     0.76s  0.99% 48.38%      0.76s  0.99%  runtime.(*mspan).base (inline)
     0.72s  0.94% 49.33%      0.72s  0.94%  runtime.tgkill
     0.71s  0.93% 50.26%      0.81s  1.06%  encoding/json.appendString[go.shape.string]
     0.71s  0.93% 51.18%     15.55s 20.33%  net/http.Header.Clone (inline)
     0.69s   0.9% 52.09%      2.75s  3.60%  internal/runtime/maps.(*Iter).Init
     0.69s   0.9% 52.99%     12.06s 15.77%  runtime.mapassign_faststr
     0.68s  0.89% 53.88%      2.76s  3.61%  runtime.rand
     0.68s  0.89% 54.77%      0.68s  0.89%  runtime.releasem (inline)
     0.67s  0.88% 55.64%      0.94s  1.23%  runtime.scanblock
     0.63s  0.82% 56.47%      2.07s  2.71%  net/textproto.CanonicalMIMEHeaderKey
     0.61s   0.8% 57.26%      0.61s   0.8%  internal/runtime/atomic.(*Uint32).Add (inline)
     0.53s  0.69% 57.96%     13.08s 17.10%  runtime.newobject
     0.52s  0.68% 58.64%      0.55s  0.72%  runtime.traceAcquireEnabled
     0.51s  0.67% 59.30%      0.54s  0.71%  runtime.spanOf (inline)
     0.49s  0.64% 59.95%      0.49s  0.64%  runtime.(*fixalloc).alloc
     0.46s   0.6% 60.55%      6.04s  7.90%  bolt.(*Router).GetValue
     0.46s   0.6% 61.15%      0.91s  1.19%  runtime.mallocgcTiny
     0.46s   0.6% 61.75%      1.02s  1.33%  sync.(*Pool).Put
     0.45s  0.59% 62.34%      0.45s  0.59%  runtime.memmove
     0.45s  0.59% 62.93%      0.45s  0.59%  runtime.procyield
     0.44s  0.58% 63.50%      1.27s  1.66%  internal/runtime/maps.(*Map).putSlotSmallFastStr
     0.40s  0.52% 64.03%      2.38s  3.11%  runtime.mallocgcSmallNoscan
     0.39s  0.51% 64.54%      0.39s  0.51%  runtime.nanotime (inline)
     0.38s   0.5% 65.03%      0.65s  0.85%  runtime.(*spanSet).push
     0.38s   0.5% 65.53%      2.51s  3.28%  runtime.(*sweepLocked).sweep
     0.37s  0.48% 66.01%      1.24s  1.62%  internal/runtime/maps.(*Map).getWithoutKeySmallFastStr
     0.37s  0.48% 66.50%      1.18s  1.54%  runtime.wbBufFlush1
     0.37s  0.48% 66.98%      0.63s  0.82%  sync.(*Pool).Get
     0.35s  0.46% 67.44%      0.69s   0.9%  sync.(*Pool).pin
     0.31s  0.41% 67.84%      5.45s  7.13%  encoding/json.mapEncoder.encode
     0.31s  0.41% 68.25%      1.55s  2.03%  runtime.mapaccess1_faststr
     0.30s  0.39% 68.64%      2.80s  3.66%  bytes.(*Buffer).Write
     0.29s  0.38% 69.02%      0.47s  0.61%  runtime.unlock2
     0.27s  0.35% 69.37%      1.21s  1.58%  runtime.(*mheap).initSpan
     0.27s  0.35% 69.73%      3.59s  4.69%  runtime.sweepone
     0.26s  0.34% 70.07%      4.55s  5.95%  runtime.makeslice
     0.26s  0.34% 70.41%      5.23s  6.84%  runtime.mapIterStart
     0.24s  0.31% 70.72%      5.45s  7.13%  runtime.(*mcache).refill
     0.24s  0.31% 71.03%      2.25s  2.94%  runtime.(*mheap).allocSpan
     0.23s   0.3% 71.34%      9.20s 12.03%  internal/runtime/maps.(*Map).growToSmall
     0.23s   0.3% 71.64%      2.84s  3.71%  runtime.heapSetTypeNoHeader (inline)
     0.21s  0.27% 71.91%     17.38s 22.73%  bolt.(*Context).JSON
     0.21s  0.27% 72.19%     20.60s 26.94%  bolt.DefaultErrorHandler
     0.21s  0.27% 72.46%      0.64s  0.84%  runtime.(*spanSet).pop
     0.20s  0.26% 72.72%      1.14s  1.49%  gcWriteBarrier
     0.20s  0.26% 72.98%      2.97s  3.88%  internal/runtime/maps.rand
     0.20s  0.26% 73.24%     15.80s 20.66%  net/http/httptest.(*ResponseRecorder).WriteHeader
     0.19s  0.25% 73.49%      0.40s  0.52%  internal/sync.(*HashTrieMap[go.shape.interface {},go.shape.interface {}]).Load
     0.19s  0.25% 73.74%      5.75s  7.52%  runtime.(*mcache).nextFree
     0.19s  0.25% 73.99%      1.46s  1.91%  runtime.deductAssistCredit
     0.19s  0.25% 74.24%      0.66s  0.86%  runtime.lock2
     0.19s  0.25% 74.49%      2.59s  3.39%  runtime.rawbyteslice
     0.18s  0.24% 74.72%      1.15s  1.50%  bolt.(*ContextPool).Release
     0.17s  0.22% 74.94%     16.47s 21.54%  bolt.(*Context).String
     0.16s  0.21% 75.15%      0.94s  1.23%  runtime.(*mheap).freeSpanLocked
     0.16s  0.21% 75.36%      0.49s  0.64%  runtime.greyobject
     0.16s  0.21% 75.57%      6.63s  8.67%  runtime.makemap_small
     0.16s  0.21% 75.78%      8.76s 11.46%  runtime.newarray
     0.15s   0.2% 75.98%      0.40s  0.52%  runtime.typedslicecopy
     0.14s  0.18% 76.16%      2.25s  2.94%  bytes.(*Buffer).grow
     0.14s  0.18% 76.34%      1.76s  2.30%  internal/chacha8rand.(*State).Refill
     0.13s  0.17% 76.51%      6.03s  7.89%  encoding/json.(*encodeState).reflectValue
     0.13s  0.17% 76.68%      2.83s  3.70%  runtime.stringtoslicebyte
     0.12s  0.16% 76.84%      2.09s  2.73%  runtime.makemap
     0.12s  0.16% 77.00%      0.40s  0.52%  runtime.pcvalue
     0.11s  0.14% 77.14%      2.80s  3.66%  net/http/httptest.(*ResponseRecorder).Write
     0.11s  0.14% 77.29%      0.76s  0.99%  runtime.gcmarknewobject
     0.10s  0.13% 77.42%      1.54s  2.01%  bolt.(*Context).BindJSON
     0.10s  0.13% 77.55%      9.95s 13.01%  net/textproto.MIMEHeader.Set (inline)
     0.10s  0.13% 77.68%      1.08s  1.41%  reflect.mapIterStart
     0.10s  0.13% 77.81%      0.83s  1.09%  runtime.(*gcControllerState).update
     0.10s  0.13% 77.94%      3.73s  4.88%  runtime.(*mcentral).cacheSpan
     0.09s  0.12% 78.06%      1.10s  1.44%  runtime.makeSpanClass (inline)
     0.07s 0.092% 78.15%      7.98s 10.44%  encoding/json.(*Encoder).Encode
     0.07s 0.092% 78.24%      0.81s  1.06%  reflect.(*MapIter).Key
     0.07s 0.092% 78.33%      1.31s  1.71%  reflect.copyVal
     0.07s 0.092% 78.42%      0.61s   0.8%  runtime.newMarkBits
     0.06s 0.078% 78.50%      1.36s  1.78%  runtime.mapIterNext
     0.05s 0.065% 78.57%      7.87s 10.29%  benchmarks/bolt.BenchmarkMiddleware.func2
     0.05s 0.065% 78.63%      6.15s  8.04%  encoding/json.(*encodeState).marshal
     0.05s 0.065% 78.70%      8.86s 11.59%  internal/runtime/maps.newGroups (inline)
     0.05s 0.065% 78.76%      8.81s 11.52%  internal/runtime/maps.newarray
     0.05s 0.065% 78.83%      2.27s  2.97%  net/url.(*URL).Query
     0.05s 0.065% 78.89%      1.44s  1.88%  reflect.(*MapIter).Next
     0.05s 0.065% 78.96%      0.59s  0.77%  runtime.(*mcentral).uncacheSpan
     0.05s 0.065% 79.02%      0.63s  0.82%  runtime.(*mheap).nextSpanForSweep
     0.05s 0.065% 79.09%      7.32s  9.57%  runtime.gcDrain
     0.05s 0.065% 79.16%      0.57s  0.75%  runtime.traceWriter.event
     0.04s 0.052% 79.21%     16.04s 20.98%  benchmarks/bolt.BenchmarkMiddleware
     0.04s 0.052% 79.26%      6.47s  8.46%  internal/runtime/maps.NewEmptyMap (inline)
     0.04s 0.052% 79.31%      1.97s  2.58%  internal/runtime/maps.NewMap
     0.04s 0.052% 79.36%      5.03s  6.58%  net/http/httptest.NewRecorder (inline)
     0.04s 0.052% 79.42%      1.41s  1.84%  reflect.unsafe_New
     0.04s 0.052% 79.47%      0.42s  0.55%  runtime.(*pageAlloc).free
     0.04s 0.052% 79.52%      2.27s  2.97%  runtime.findRunnable
     0.04s 0.052% 79.57%     16.13s 21.09%  runtime.systemstack
     0.03s 0.039% 79.61%     14.48s 18.94%  benchmarks/bolt.BenchmarkDynamicRoute
     0.03s 0.039% 79.65%     13.78s 18.02%  benchmarks/bolt.BenchmarkStaticRoute
     0.03s 0.039% 79.69%      0.44s  0.58%  encoding/json.typeEncoder
     0.03s 0.039% 79.73%      0.46s   0.6%  net/textproto.MIMEHeader.Get
     0.03s 0.039% 79.77%      0.63s  0.82%  reflect.(*MapIter).Value
     0.03s 0.039% 79.81%      1.18s  1.54%  runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func2
     0.02s 0.026% 79.84%      2.06s  2.69%  bolt.(*App).PostJSON.wrapTypedHandler.func1
     0.02s 0.026% 79.86%      0.75s  0.98%  encoding/json.stringEncoder
     0.02s 0.026% 79.89%      9.97s 13.04%  net/http.Header.Set (inline)
     0.02s 0.026% 79.91%      2.22s  2.90%  net/url.ParseQuery (inline)
     0.02s 0.026% 79.94%      2.28s  2.98%  runtime.(*mheap).alloc
     0.02s 0.026% 79.97%      3.79s  4.96%  runtime.bgsweep
     0.02s 0.026% 79.99%      0.65s  0.85%  runtime.forEachPInternal
     0.02s 0.026% 80.02%      1.27s  1.66%  runtime.gcAssistAlloc
     0.02s 0.026% 80.04%      0.45s  0.59%  runtime.notesleep
     0.02s 0.026% 80.07%      3.66s  4.79%  runtime.schedule
     0.02s 0.026% 80.10%      0.58s  0.76%  runtime.traceAcquire (inline)
     0.02s 0.026% 80.12%      0.63s  0.82%  runtime.traceEventWriter.event
     0.02s 0.026% 80.15%      0.47s  0.61%  runtime.traceRelease (inline)
     0.01s 0.013% 80.16%      8.66s 11.32%  benchmarks/bolt.BenchmarkStaticRoute.func1
     0.01s 0.013% 80.18%      0.71s  0.93%  encoding/json.Unmarshal
     0.01s 0.013% 80.19%      0.47s  0.61%  net/http.Header.Get (inline)
     0.01s 0.013% 80.20%      0.42s  0.55%  runtime.(*gcControllerState).enlistWorker
     0.01s 0.013% 80.21%      2.67s  3.49%  runtime.(*mcentral).grow
     0.01s 0.013% 80.23%      2.25s  2.94%  runtime.(*mheap).alloc.func1
     0.01s 0.013% 80.24%      3.43s  4.49%  runtime.futexwakeup
     0.01s 0.013% 80.25%      1.15s  1.50%  runtime.gcDrainN
     0.01s 0.013% 80.27%      1.55s  2.03%  runtime.gcMarkDone
     0.01s 0.013% 80.28%      1.99s  2.60%  runtime.goschedImpl
     0.01s 0.013% 80.29%      0.67s  0.88%  runtime.lock (partial-inline)
     0.01s 0.013% 80.31%      1.68s  2.20%  runtime.markroot
     0.01s 0.013% 80.32%      0.85s  1.11%  runtime.signalM
     0.01s 0.013% 80.33%         1s  1.31%  runtime.startTheWorldWithSema
     0.01s 0.013% 80.35%      0.68s  0.89%  runtime.stopm
     0.01s 0.013% 80.36%      0.44s  0.58%  runtime.traceLocker.HeapAlloc
     0.01s 0.013% 80.37%      0.49s  0.64%  runtime.unlock (partial-inline)
     0.01s 0.013% 80.38%      0.48s  0.63%  runtime.unlockWithRank (inline)
     0.01s 0.013% 80.40%      2.58s  3.37%  runtime.wakep
     0.01s 0.013% 80.41%      1.09s  1.43%  runtime.wbBufFlush
         0     0% 80.41%     10.84s 14.18%  benchmarks/bolt.BenchmarkMiddleware.func1.1
         0     0% 80.41%     14.14s 18.49%  benchmarks/bolt.BenchmarkTypedJSON
         0     0% 80.41%      0.44s  0.58%  encoding/json.valueEncoder
         0     0% 80.41%      0.39s  0.51%  reflect.New
         0     0% 80.41%      0.48s  0.63%  runtime.(*gcWork).balance
         0     0% 80.41%      0.47s  0.61%  runtime.(*mheap).allocMSpanLocked
         0     0% 80.41%      1.18s  1.54%  runtime.(*mheap).freeSpan (inline)
         0     0% 80.41%      0.65s  0.85%  runtime.forEachP (inline)
         0     0% 80.41%      0.69s   0.9%  runtime.futexsleep
         0     0% 80.41%      1.19s  1.56%  runtime.gcAssistAlloc.func2
         0     0% 80.41%      1.19s  1.56%  runtime.gcAssistAlloc1
         0     0% 80.41%      8.91s 11.65%  runtime.gcBgMarkWorker
         0     0% 80.41%      7.33s  9.59%  runtime.gcBgMarkWorker.func2
         0     0% 80.41%      7.23s  9.45%  runtime.gcDrainMarkWorkerDedicated (inline)
         0     0% 80.41%      0.43s  0.56%  runtime.gcMarkDone.forEachP.func5
         0     0% 80.41%      0.79s  1.03%  runtime.gcMarkTermination
         0     0% 80.41%      0.41s  0.54%  runtime.gcMarkTermination.func3
         0     0% 80.41%      1.10s  1.44%  runtime.gcStart
         0     0% 80.41%      0.58s  0.76%  runtime.gcStart.func4
         0     0% 80.41%      1.97s  2.58%  runtime.gopreempt_m (inline)
         0     0% 80.41%      0.66s  0.86%  runtime.lockWithRank (inline)
         0     0% 80.41%      0.45s  0.59%  runtime.mPark (inline)
         0     0% 80.41%      0.46s   0.6%  runtime.mProf_Malloc
         0     0% 80.41%      0.73s  0.95%  runtime.markroot.func1
         0     0% 80.41%      0.86s  1.12%  runtime.markrootBlock
         0     0% 80.41%      2.49s  3.26%  runtime.mcall
         0     0% 80.41%      1.97s  2.58%  runtime.morestack
         0     0% 80.41%      2.18s  2.85%  runtime.newstack
         0     0% 80.41%      3.28s  4.29%  runtime.notewakeup
         0     0% 80.41%      2.47s  3.23%  runtime.park_m
         0     0% 80.41%      0.87s  1.14%  runtime.preemptM (inline)
         0     0% 80.41%      0.77s  1.01%  runtime.preemptone
         0     0% 80.41%      0.49s  0.64%  runtime.profilealloc
         0     0% 80.41%      1.26s  1.65%  runtime.resetspinning
         0     0% 80.41%      0.79s  1.03%  runtime.runSafePointFn
         0     0% 80.41%      0.51s  0.67%  runtime.scanstack
         0     0% 80.41%      2.54s  3.32%  runtime.startm
         0     0% 80.41%      1.07s  1.40%  runtime.wbBufFlush.func1
         0     0% 80.41%      0.40s  0.52%  sync.(*Map).Load (inline)
         0     0% 80.41%     58.48s 76.47%  testing.(*B).launch
         0     0% 80.41%     58.48s 76.47%  testing.(*B).runN
