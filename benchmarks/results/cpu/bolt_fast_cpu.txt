File: bolt_fast.test
Build ID: 7ac48e0941be0e23973aadae74c0651632fda924
Type: cpu
Time: 2025-10-03 18:03:50 -03
Duration: 103.55s, Total samples = 149.22s (144.10%)
Showing nodes accounting for 120.10s, 80.49% of 149.22s total
Dropped 626 nodes (cum <= 0.75s)
      flat  flat%   sum%        cum   cum%
    13.70s  9.18%  9.18%     13.70s  9.18%  runtime.memclrNoHeapPointers
    11.95s  8.01% 17.19%     11.95s  8.01%  runtime.futex
     7.75s  5.19% 22.38%     22.74s 15.24%  runtime.scanobject
     7.14s  4.78% 27.17%      8.14s  5.46%  runtime.typePointers.next
     3.99s  2.67% 29.84%      3.99s  2.67%  runtime.nextFreeFast (inline)
     3.70s  2.48% 32.32%     33.99s 22.78%  runtime.mallocgcSmallScanNoHeader
     3.63s  2.43% 34.75%      5.08s  3.40%  runtime.findObject
     3.44s  2.31% 37.06%      3.63s  2.43%  runtime.(*mspan).writeHeapBitsSmall
        3s  2.01% 39.07%      4.43s  2.97%  internal/runtime/maps.(*Iter).Next
     2.46s  1.65% 40.72%     52.43s 35.14%  runtime.mallocgc
     2.46s  1.65% 42.37%     10.09s  6.76%  runtime.sweepone
        2s  1.34% 43.71%         2s  1.34%  runtime.tgkill
     1.98s  1.33% 45.03%      2.02s  1.35%  net/textproto.validHeaderFieldByte (inline)
     1.80s  1.21% 46.24%      2.69s  1.80%  runtime.scanblock
     1.62s  1.09% 47.33%      1.62s  1.09%  runtime.madvise
     1.61s  1.08% 48.41%      1.61s  1.08%  runtime.(*fixalloc).alloc
     1.60s  1.07% 49.48%      1.60s  1.07%  aeshashbody
     1.51s  1.01% 50.49%      1.51s  1.01%  runtime.(*mspan).base (inline)
     1.43s  0.96% 51.45%      1.43s  0.96%  runtime.(*mspan).init
     1.32s  0.88% 52.33%      1.40s  0.94%  runtime.step
     1.30s  0.87% 53.20%      1.30s  0.87%  internal/chacha8rand.block
     1.26s  0.84% 54.05%      1.26s  0.84%  runtime.typePointers.nextFast (inline)
     1.16s  0.78% 54.83%      2.53s  1.70%  runtime.(*spanSet).push
     1.14s  0.76% 55.59%     21.66s 14.52%  runtime.mapassign_faststr
     1.13s  0.76% 56.35%     81.72s 54.76%  bolt.(*App).ServeHTTP
     1.04s   0.7% 57.04%      3.08s  2.06%  net/textproto.CanonicalMIMEHeaderKey
     1.02s  0.68% 57.73%     23.90s 16.02%  net/http.Header.Clone (inline)
        1s  0.67% 58.40%         1s  0.67%  runtime.releasem (inline)
     0.97s  0.65% 59.05%      6.36s  4.26%  runtime.(*sweepLocked).sweep
     0.96s  0.64% 59.69%      0.96s  0.64%  internal/runtime/atomic.(*Uint32).Add (inline)
     0.94s  0.63% 60.32%      0.99s  0.66%  runtime.(*spanSet).reset
     0.92s  0.62% 60.94%      0.92s  0.62%  internal/runtime/maps.(*groupReference).key (inline)
     0.91s  0.61% 61.55%      0.91s  0.61%  runtime.nanotime (inline)
     0.91s  0.61% 62.16%      0.92s  0.62%  sync/atomic.(*Int32).Add (inline)
     0.87s  0.58% 62.74%         1s  0.67%  runtime.spanOf (inline)
     0.84s  0.56% 63.30%      0.84s  0.56%  runtime.bool2int (inline)
     0.83s  0.56% 63.86%      0.83s  0.56%  runtime.memmove
     0.83s  0.56% 64.41%      0.87s  0.58%  runtime.traceAcquireEnabled
     0.76s  0.51% 64.92%     20.43s 13.69%  runtime.newobject
     0.75s   0.5% 65.43%      0.76s  0.51%  runtime.(*lfstack).pop (inline)
     0.75s   0.5% 65.93%      0.77s  0.52%  runtime.(*mspan).heapBitsSmallForAddr
     0.75s   0.5% 66.43%      1.66s  1.11%  runtime.(*unwinder).resolveInternal
     0.72s  0.48% 66.91%      2.44s  1.64%  runtime.rand
     0.70s  0.47% 67.38%      1.59s  1.07%  internal/runtime/maps.(*Map).putSlotSmallFastStr
     0.69s  0.46% 67.85%      1.55s  1.04%  internal/runtime/maps.(*Map).getWithoutKeySmallFastStr
     0.62s  0.42% 68.26%      1.93s  1.29%  runtime.greyobject
     0.61s  0.41% 68.67%      2.08s  1.39%  github.com/goccy/go-json/internal/encoder/vm.Run
     0.54s  0.36% 69.03%      1.74s  1.17%  runtime.(*spanSet).pop
     0.52s  0.35% 69.38%     12.17s  8.16%  runtime.mallocgcSmallNoscan
     0.49s  0.33% 69.71%      2.64s  1.77%  internal/runtime/maps.(*Iter).Init
     0.48s  0.32% 70.03%      0.89s   0.6%  runtime.(*traceMap).put
     0.45s   0.3% 70.33%      1.96s  1.31%  runtime.wbBufFlush1
     0.44s  0.29% 70.63%      1.52s  1.02%  bolt.(*ContextPool).Release
     0.43s  0.29% 70.92%      4.27s  2.86%  bolt.writeFieldsDirectToWriter
     0.41s  0.27% 71.19%      2.05s  1.37%  runtime.pcvalue
     0.40s  0.27% 71.46%     21.69s 14.54%  bolt.(*Context).Bytes
     0.38s  0.25% 71.71%      1.16s  0.78%  runtime.lock2
     0.36s  0.24% 71.95%      1.94s  1.30%  gcWriteBarrier
     0.36s  0.24% 72.20%     13.84s  9.27%  runtime.(*mcache).refill
     0.35s  0.23% 72.43%      3.06s  2.05%  bolt.(*Router).GetValue
     0.35s  0.23% 72.66%      1.02s  0.68%  runtime.unlock2
     0.35s  0.23% 72.90%      0.85s  0.57%  sync.(*Pool).Put
     0.34s  0.23% 73.13%     14.62s  9.80%  runtime.makeslice
     0.33s  0.22% 73.35%      4.64s  3.11%  net/http/httptest.(*ResponseRecorder).Write
     0.33s  0.22% 73.57%     24.36s 16.32%  net/http/httptest.(*ResponseRecorder).WriteHeader
     0.33s  0.22% 73.79%      5.40s  3.62%  runtime.(*mheap).allocSpan
     0.32s  0.21% 74.00%      3.44s  2.31%  bytes.(*Buffer).grow
     0.30s   0.2% 74.21%      4.12s  2.76%  bytes.(*Buffer).Write
     0.30s   0.2% 74.41%     10.57s  7.08%  runtime.(*mcentral).cacheSpan
     0.28s  0.19% 74.59%      2.44s  1.64%  runtime.(*mheap).initSpan
     0.27s  0.18% 74.78%      3.90s  2.61%  runtime.heapSetTypeNoHeader (inline)
     0.26s  0.17% 74.95%     14.89s  9.98%  bolt.(*Context).StringBytes
     0.26s  0.17% 75.12%     17.70s 11.86%  internal/runtime/maps.(*Map).growToSmall
     0.25s  0.17% 75.29%      1.81s  1.21%  runtime.mapaccess1_faststr
     0.24s  0.16% 75.45%     49.66s 33.28%  runtime.systemstack
     0.23s  0.15% 75.61%      5.56s  3.73%  runtime.mapIterStart
     0.21s  0.14% 75.75%      1.05s   0.7%  runtime.makeSpanClass (inline)
     0.20s  0.13% 75.88%      1.64s  1.10%  runtime.(*gcControllerState).update
     0.20s  0.13% 76.02%      1.37s  0.92%  runtime.gcmarknewobject
     0.19s  0.13% 76.14%      0.90s   0.6%  runtime.(*pageAlloc).update
     0.19s  0.13% 76.27%     26.71s 17.90%  runtime.gcDrain
     0.18s  0.12% 76.39%     21.96s 14.72%  bolt.DefaultErrorHandler
     0.18s  0.12% 76.51%     17.13s 11.48%  runtime.newarray
     0.17s  0.11% 76.63%      1.47s  0.99%  internal/chacha8rand.(*State).Refill
     0.17s  0.11% 76.74%     14.19s  9.51%  runtime.(*mcache).nextFree
     0.17s  0.11% 76.85%      1.98s  1.33%  runtime.(*mheap).freeSpanLocked
     0.16s  0.11% 76.96%      1.26s  0.84%  fmt.(*pp).printValue
     0.16s  0.11% 77.07%      1.09s  0.73%  runtime.(*mspan).typePointersOfUnchecked
     0.15s   0.1% 77.17%      9.94s  6.66%  benchmarks/bolt_fast.BenchmarkFastFileUpload.func1
     0.15s   0.1% 77.27%      5.94s  3.98%  runtime.findRunnable
     0.15s   0.1% 77.37%      5.25s  3.52%  runtime.markroot
     0.14s 0.094% 77.46%      3.69s  2.47%  runtime.deductAssistCredit
     0.13s 0.087% 77.55%      3.03s  2.03%  internal/runtime/maps.NewMap
     0.13s 0.087% 77.64%      1.54s  1.03%  net/textproto.MIMEHeader.Get
     0.12s  0.08% 77.72%      2.58s  1.73%  internal/runtime/maps.rand
     0.12s  0.08% 77.80%     15.27s 10.23%  net/textproto.MIMEHeader.Set (inline)
     0.12s  0.08% 77.88%      0.87s  0.58%  runtime.growslice
     0.12s  0.08% 77.96%      1.67s  1.12%  runtime.mapIterNext
     0.11s 0.074% 78.03%      6.15s  4.12%  bolt.(*Context).BindJSON
     0.10s 0.067% 78.10%      4.46s  2.99%  github.com/goccy/go-json/internal/decoder.NewStream (inline)
     0.10s 0.067% 78.17%     17.23s 11.55%  internal/runtime/maps.newarray
     0.10s 0.067% 78.23%      1.22s  0.82%  runtime.traceWriter.event
     0.09s  0.06% 78.29%      0.98s  0.66%  github.com/goccy/go-json.(*Decoder).DecodeWithOption
     0.08s 0.054% 78.35%      1.91s  1.28%  runtime.notesleep
     0.07s 0.047% 78.39%      5.13s  3.44%  benchmarks/bolt_fast.BenchmarkFastComplexRouting.func1
     0.07s 0.047% 78.44%         4s  2.68%  bolt.(*Context).JSON
     0.07s 0.047% 78.49%      9.46s  6.34%  bolt.(*Context).JSONFields
     0.07s 0.047% 78.54%      1.50s  1.01%  fmt.(*pp).doPrintf
     0.07s 0.047% 78.58%      1.43s  0.96%  fmt.(*pp).printArg
     0.07s 0.047% 78.63%         8s  5.36%  net/http/httptest.NewRecorder (inline)
     0.07s 0.047% 78.68%      1.54s  1.03%  runtime.(*mcentral).uncacheSpan
     0.07s 0.047% 78.72%      1.55s  1.04%  runtime.(*mheap).nextSpanForSweep
     0.07s 0.047% 78.77%     31.80s 21.31%  runtime.gcBgMarkWorker
     0.07s 0.047% 78.82%      3.17s  2.12%  runtime.makemap_small
     0.07s 0.047% 78.86%      0.77s  0.52%  runtime.newMarkBits
     0.06s  0.04% 78.90%      8.49s  5.69%  benchmarks/bolt_fast.BenchmarkFastStaticRoute.func1
     0.06s  0.04% 78.94%      0.98s  0.66%  runtime.(*pageAlloc).free
     0.06s  0.04% 78.98%      2.07s  1.39%  runtime.forEachPInternal
     0.06s  0.04% 79.02%      2.76s  1.85%  runtime.futexsleep
     0.06s  0.04% 79.06%      1.41s  0.94%  runtime.tracebackPCs
     0.05s 0.034% 79.10%      2.21s  1.48%  github.com/goccy/go-json.encode
     0.05s 0.034% 79.13%      2.47s  1.66%  github.com/goccy/go-json.marshal
     0.05s 0.034% 79.16%     17.28s 11.58%  internal/runtime/maps.newGroups (inline)
     0.05s 0.034% 79.20%      8.09s  5.42%  runtime.(*mcentral).grow
     0.05s 0.034% 79.23%      5.53s  3.71%  runtime.(*mheap).alloc
     0.05s 0.034% 79.27%      3.09s  2.07%  runtime.makemap
     0.05s 0.034% 79.30%     10.74s  7.20%  runtime.schedule
     0.05s 0.034% 79.33%      0.95s  0.64%  runtime.traceAcquire (inline)
     0.05s 0.034% 79.37%      0.98s  0.66%  runtime.traceStack
     0.04s 0.027% 79.39%     11.19s  7.50%  benchmarks/bolt_fast.BenchmarkFastDynamicRoute
     0.04s 0.027% 79.42%      3.10s  2.08%  internal/runtime/maps.NewEmptyMap (inline)
     0.04s 0.027% 79.45%      2.11s  1.41%  net/url.parseQuery
     0.04s 0.027% 79.47%      0.75s   0.5%  runtime.(*mcache).prepareForSweep
     0.04s 0.027% 79.50%      0.79s  0.53%  runtime.(*traceStackTable).put
     0.04s 0.027% 79.53%     10.03s  6.72%  runtime.bgsweep
     0.04s 0.027% 79.55%      1.60s  1.07%  runtime.callers.func1
     0.04s 0.027% 79.58%      3.55s  2.38%  runtime.gcAssistAlloc
     0.04s 0.027% 79.61%      8.20s  5.50%  runtime.mcall
     0.04s 0.027% 79.63%      7.95s  5.33%  runtime.park_m
     0.04s 0.027% 79.66%      0.98s  0.66%  runtime.stopTheWorldWithSema
     0.04s 0.027% 79.69%      1.29s  0.86%  runtime.traceEventWriter.event
     0.03s  0.02% 79.71%      2.96s  1.98%  benchmarks/bolt_fast.BenchmarkFastLargeJSON.func1
     0.03s  0.02% 79.73%      6.49s  4.35%  benchmarks/bolt_fast.BenchmarkFastMiddleware.func2
     0.03s  0.02% 79.75%     11.66s  7.81%  benchmarks/bolt_fast.BenchmarkFastQueryParameters
     0.03s  0.02% 79.77%      7.53s  5.05%  benchmarks/bolt_fast.BenchmarkFastQueryParameters.func1
     0.03s  0.02% 79.79%     11.07s  7.42%  benchmarks/bolt_fast.BenchmarkFastTypedJSON
     0.03s  0.02% 79.81%      1.87s  1.25%  fmt.Sprintf
     0.03s  0.02% 79.83%      1.09s  0.73%  runtime.(*gcControllerState).enlistWorker
     0.03s  0.02% 79.85%      1.17s  0.78%  runtime.(*gcWork).balance
     0.03s  0.02% 79.87%      5.47s  3.67%  runtime.(*mheap).alloc.func1
     0.03s  0.02% 79.89%      1.59s  1.07%  runtime.(*mheap).allocMSpanLocked
     0.03s  0.02% 79.91%      2.51s  1.68%  runtime.(*mspan).initHeapBits
     0.03s  0.02% 79.93%      1.76s  1.18%  runtime.(*pageAlloc).scavengeOne
     0.03s  0.02% 79.95%      2.50s  1.68%  runtime.gcStart
     0.03s  0.02% 79.97%      1.19s   0.8%  runtime.lock (partial-inline)
     0.03s  0.02% 79.99%      1.04s   0.7%  runtime.makeTraceFrames
     0.03s  0.02% 80.01%      0.90s   0.6%  runtime.notetsleep_internal
     0.03s  0.02% 80.03%         1s  0.67%  runtime.preemptall
     0.03s  0.02% 80.05%      1.63s  1.09%  runtime.runSafePointFn
     0.03s  0.02% 80.07%      2.21s  1.48%  runtime.signalM
     0.03s  0.02% 80.09%      2.56s  1.72%  runtime.stopm
     0.03s  0.02% 80.11%      1.65s  1.11%  runtime.sysUnusedOS
     0.03s  0.02% 80.13%      0.99s  0.66%  runtime.traceLocker.HeapAlloc
     0.03s  0.02% 80.15%      1.05s   0.7%  runtime.unlock (partial-inline)
     0.03s  0.02% 80.17%      1.76s  1.18%  runtime.wbBufFlush.func1
     0.02s 0.013% 80.18%     10.91s  7.31%  benchmarks/bolt_fast.BenchmarkFastComplexRouting
     0.02s 0.013% 80.20%     11.46s  7.68%  benchmarks/bolt_fast.BenchmarkFastStaticRoute
     0.02s 0.013% 80.21%         1s  0.67%  github.com/goccy/go-json.(*Decoder).Decode (inline)
     0.02s 0.013% 80.22%      2.10s  1.41%  github.com/goccy/go-json.encodeRunCode
     0.02s 0.013% 80.24%      2.31s  1.55%  runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func2
     0.02s 0.013% 80.25%      2.10s  1.41%  runtime.forEachP (inline)
     0.02s 0.013% 80.26%     26.76s 17.93%  runtime.gcBgMarkWorker.func2
     0.02s 0.013% 80.28%      3.17s  2.12%  runtime.gcDrainN
     0.02s 0.013% 80.29%      2.35s  1.57%  runtime.gcMarkTermination
     0.02s 0.013% 80.30%      1.93s  1.29%  runtime.mPark (inline)
     0.02s 0.013% 80.32%      8.70s  5.83%  runtime.notewakeup
     0.02s 0.013% 80.33%      1.88s  1.26%  runtime.scanstack
     0.02s 0.013% 80.34%      7.37s  4.94%  runtime.startm
     0.02s 0.013% 80.36%      7.49s  5.02%  runtime.wakep
     0.01s 0.0067% 80.36%     10.22s  6.85%  benchmarks/bolt_fast.BenchmarkFastLargeJSON
     0.01s 0.0067% 80.37%      9.37s  6.28%  benchmarks/bolt_fast.BenchmarkFastMiddleware.func1.1
     0.01s 0.0067% 80.38%      3.03s  2.03%  benchmarks/bolt_fast.BenchmarkFastTypedJSON.func1
     0.01s 0.0067% 80.38%      4.47s  3.00%  github.com/goccy/go-json.NewDecoder (inline)
     0.01s 0.0067% 80.39%      1.55s  1.04%  net/http.Header.Get (inline)
     0.01s 0.0067% 80.40%      2.31s  1.55%  net/url.(*URL).Query
     0.01s 0.0067% 80.40%      0.80s  0.54%  runtime.(*Frames).Next
     0.01s 0.0067% 80.41%      1.79s  1.20%  runtime.(*pageAlloc).scavenge
     0.01s 0.0067% 80.42%      1.77s  1.19%  runtime.(*pageAlloc).scavenge.func1
     0.01s 0.0067% 80.42%      1.85s  1.24%  runtime.(*scavengerState).run
     0.01s 0.0067% 80.43%      1.62s  1.09%  runtime.(*unwinder).next
     0.01s 0.0067% 80.44%      1.61s  1.08%  runtime.callers
     0.01s 0.0067% 80.44%      1.11s  0.74%  runtime.finishsweep_m
     0.01s 0.0067% 80.45%      9.26s  6.21%  runtime.futexwakeup
     0.01s 0.0067% 80.46%      0.90s   0.6%  runtime.gcStart.func4
     0.01s 0.0067% 80.47%      4.94s  3.31%  runtime.morestack
     0.01s 0.0067% 80.47%      5.64s  3.78%  runtime.newstack
     0.01s 0.0067% 80.48%      1.66s  1.11%  runtime.sysUnused (inline)
     0.01s 0.0067% 80.49%      1.79s  1.20%  runtime.wbBufFlush
         0     0% 80.49%      0.88s  0.59%  benchmarks/bolt_fast.BenchmarkFastComplexRouting.func3
         0     0% 80.49%     11.07s  7.42%  benchmarks/bolt_fast.BenchmarkFastFileUpload
         0     0% 80.49%     12.32s  8.26%  benchmarks/bolt_fast.BenchmarkFastMiddleware
         0     0% 80.49%     14.89s  9.98%  bolt.(*Context).Text (inline)
         0     0% 80.49%      2.47s  1.66%  github.com/goccy/go-json.Marshal
         0     0% 80.49%      2.47s  1.66%  github.com/goccy/go-json.MarshalWithOption (inline)
         0     0% 80.49%     15.27s 10.23%  net/http.Header.Set (inline)
         0     0% 80.49%      2.30s  1.54%  net/url.ParseQuery (inline)
         0     0% 80.49%      2.32s  1.55%  runtime.(*mheap).freeSpan (inline)
         0     0% 80.49%      1.84s  1.23%  runtime.(*scavengerState).init.func2
         0     0% 80.49%      1.32s  0.88%  runtime.(*traceAdvancerState).start.func1
         0     0% 80.49%      1.25s  0.84%  runtime.(*traceStackTable).dump
         0     0% 80.49%      1.93s  1.29%  runtime.bgscavenge
         0     0% 80.49%      1.25s  0.84%  runtime.dumpStacksRec
         0     0% 80.49%      0.91s  0.61%  runtime.funcspdelta (inline)
         0     0% 80.49%      3.26s  2.18%  runtime.gcAssistAlloc.func2
         0     0% 80.49%      3.26s  2.18%  runtime.gcAssistAlloc1
         0     0% 80.49%     25.03s 16.77%  runtime.gcDrainMarkWorkerDedicated (inline)
         0     0% 80.49%      1.68s  1.13%  runtime.gcDrainMarkWorkerIdle (inline)
         0     0% 80.49%      4.85s  3.25%  runtime.gcMarkDone
         0     0% 80.49%      1.37s  0.92%  runtime.gcMarkDone.forEachP.func5
         0     0% 80.49%      0.92s  0.62%  runtime.gcMarkTermination.func3
         0     0% 80.49%      1.11s  0.74%  runtime.gcStart.func3
         0     0% 80.49%      5.18s  3.47%  runtime.gopreempt_m (inline)
         0     0% 80.49%      5.34s  3.58%  runtime.goschedImpl
         0     0% 80.49%      1.16s  0.78%  runtime.lockWithRank (inline)
         0     0% 80.49%      1.95s  1.31%  runtime.mProf_Malloc
         0     0% 80.49%      2.35s  1.57%  runtime.markroot.func1
         0     0% 80.49%      2.45s  1.64%  runtime.markrootBlock
         0     0% 80.49%      0.90s   0.6%  runtime.notetsleep
         0     0% 80.49%      2.24s  1.50%  runtime.preemptM (inline)
         0     0% 80.49%      2.03s  1.36%  runtime.preemptone
         0     0% 80.49%      2.02s  1.35%  runtime.profilealloc
         0     0% 80.49%      4.50s  3.02%  runtime.resetspinning
         0     0% 80.49%      1.82s  1.22%  runtime.startTheWorldWithSema
         0     0% 80.49%      1.32s  0.88%  runtime.traceAdvance
         0     0% 80.49%      0.98s  0.66%  runtime.traceLocker.stack (inline)
         0     0% 80.49%      1.02s  0.68%  runtime.unlockWithRank (inline)
         0     0% 80.49%     90.05s 60.35%  testing.(*B).launch
         0     0% 80.49%     90.18s 60.43%  testing.(*B).runN
