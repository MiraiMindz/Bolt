File: echo.test
Build ID: 5c55fcc1b7b62683b68df8db11ac725d2c35fcea
Type: cpu
Time: 2025-10-03 18:08:02 -03
Duration: 61.54s, Total samples = 77.45s (125.85%)
Showing nodes accounting for 61.76s, 79.74% of 77.45s total
Dropped 471 nodes (cum <= 0.39s)
      flat  flat%   sum%        cum   cum%
     4.53s  5.85%  5.85%      4.53s  5.85%  runtime.memclrNoHeapPointers
     4.48s  5.78% 11.63%      4.48s  5.78%  runtime.futex
     3.33s  4.30% 15.93%      3.33s  4.30%  runtime.nextFreeFast (inline)
     2.72s  3.51% 19.44%         4s  5.16%  internal/runtime/maps.(*Iter).Next
     2.58s  3.33% 22.78%     21.36s 27.58%  runtime.mallocgcSmallScanNoHeader
     2.47s  3.19% 25.97%      6.99s  9.03%  runtime.scanobject
     2.23s  2.88% 28.84%      2.37s  3.06%  runtime.(*mspan).writeHeapBitsSmall
     2.14s  2.76% 31.61%      2.39s  3.09%  runtime.typePointers.next
     2.02s  2.61% 34.22%      2.03s  2.62%  net/textproto.validHeaderFieldByte (inline)
     1.60s  2.07% 36.28%     28.13s 36.32%  runtime.mallocgc
     1.56s  2.01% 38.30%      3.62s  4.67%  net/textproto.CanonicalMIMEHeaderKey
     1.33s  1.72% 40.01%      1.33s  1.72%  internal/chacha8rand.block
     1.19s  1.54% 41.55%      1.87s  2.41%  runtime.findObject
     1.13s  1.46% 43.01%      1.13s  1.46%  aeshashbody
     0.87s  1.12% 44.13%      1.17s  1.51%  github.com/labstack/echo/v4.(*Router).Find
     0.86s  1.11% 45.24%      0.86s  1.11%  runtime.bool2int (inline)
     0.84s  1.08% 46.33%      0.84s  1.08%  runtime.(*mspan).base (inline)
     0.79s  1.02% 47.35%      1.14s  1.47%  runtime.scanblock
     0.77s  0.99% 48.34%      0.77s  0.99%  runtime.tgkill
     0.72s  0.93% 49.27%      0.72s  0.93%  internal/runtime/maps.(*groupReference).key (inline)
     0.66s  0.85% 50.12%      2.40s  3.10%  runtime.rand
     0.66s  0.85% 50.97%      0.66s  0.85%  runtime.releasem (inline)
     0.62s   0.8% 51.78%     13.32s 17.20%  runtime.mapassign_faststr
     0.62s   0.8% 52.58%      0.66s  0.85%  runtime.traceAcquireEnabled
     0.59s  0.76% 53.34%      0.59s  0.76%  runtime.acquirem (inline)
     0.57s  0.74% 54.07%      0.57s  0.74%  internal/runtime/atomic.(*Uint32).Add (inline)
     0.56s  0.72% 54.80%      2.55s  3.29%  runtime.(*sweepLocked).sweep
     0.56s  0.72% 55.52%      3.74s  4.83%  runtime.sweepone
     0.53s  0.68% 56.20%     51.87s 66.97%  github.com/labstack/echo/v4.(*Echo).ServeHTTP
     0.52s  0.67% 56.88%     15.60s 20.14%  net/http.Header.Clone (inline)
     0.52s  0.67% 57.55%      0.85s  1.10%  runtime.(*spanSet).push
     0.52s  0.67% 58.22%      0.54s   0.7%  runtime.spanOf (inline)
     0.51s  0.66% 58.88%      2.41s  3.11%  internal/runtime/maps.(*Iter).Init
     0.47s  0.61% 59.48%      0.47s  0.61%  runtime.memmove
     0.45s  0.58% 60.06%      1.04s  1.34%  sync.(*Pool).Put
     0.44s  0.57% 60.63%      0.44s  0.57%  runtime.madvise
     0.42s  0.54% 61.17%      3.20s  4.13%  runtime.mallocgcSmallNoscan
     0.42s  0.54% 61.72%      0.42s  0.54%  runtime.typePointers.nextFast (inline)
     0.41s  0.53% 62.25%      0.43s  0.56%  runtime.(*spanSet).reset
     0.40s  0.52% 62.76%     10.79s 13.93%  runtime.newobject
     0.39s   0.5% 63.27%      0.40s  0.52%  runtime.(*mspan).init
     0.37s  0.48% 63.74%      0.73s  0.94%  sync.(*Pool).Get
     0.36s  0.46% 64.21%      0.64s  0.83%  runtime.(*unwinder).resolveInternal
     0.33s  0.43% 64.64%      6.25s  8.07%  runtime.(*mcache).refill
     0.33s  0.43% 65.06%      1.28s  1.65%  runtime.wbBufFlush1
     0.31s   0.4% 65.46%     16.15s 20.85%  github.com/labstack/echo/v4.(*Response).WriteHeader
     0.31s   0.4% 65.86%      0.91s  1.17%  internal/runtime/maps.(*Map).putSlotSmallFastStr
     0.31s   0.4% 66.26%      5.56s  7.18%  runtime.makeslice
     0.30s  0.39% 66.65%      0.75s  0.97%  sync.(*Pool).pin
     0.25s  0.32% 66.97%      2.84s  3.67%  bytes.(*Buffer).Write
     0.24s  0.31% 67.28%      0.49s  0.63%  internal/sync.(*HashTrieMap[go.shape.interface {},go.shape.interface {}]).Load
     0.23s   0.3% 67.58%     13.17s 17.00%  encoding/json.(*Encoder).Encode
     0.23s   0.3% 67.88%      0.56s  0.72%  github.com/labstack/echo/v4.(*context).Reset (inline)
     0.23s   0.3% 68.17%      0.49s  0.63%  runtime.unlock2
     0.22s  0.28% 68.46%      9.65s 12.46%  github.com/labstack/echo/v4.(*Response).Write
     0.22s  0.28% 68.74%      0.62s   0.8%  runtime.greyobject
     0.21s  0.27% 69.01%      1.16s  1.50%  gcWriteBarrier
     0.21s  0.27% 69.28%      1.05s  1.36%  runtime.(*mheap).initSpan
     0.21s  0.27% 69.55%      2.58s  3.33%  runtime.heapSetTypeNoHeader (inline)
     0.20s  0.26% 69.81%      0.61s  0.79%  runtime.pcvalue
     0.19s  0.25% 70.06%      0.75s  0.97%  encoding/json.structEncoder.encode
     0.19s  0.25% 70.30%     17.81s 23.00%  github.com/labstack/echo/v4.(*context).json
     0.19s  0.25% 70.55%     15.84s 20.45%  net/http/httptest.(*ResponseRecorder).WriteHeader
     0.18s  0.23% 70.78%      2.48s  3.20%  internal/runtime/maps.rand
     0.18s  0.23% 71.01%      0.49s  0.63%  runtime.typedslicecopy
     0.17s  0.22% 71.23%      0.51s  0.66%  runtime.lock2
     0.16s  0.21% 71.44%     44.82s 57.87%  github.com/labstack/echo/v4.(*Echo).add.func1
     0.16s  0.21% 71.65%      1.49s  1.92%  internal/chacha8rand.(*State).Refill
     0.16s  0.21% 71.85%      2.52s  3.25%  net/textproto.MIMEHeader.Get
     0.16s  0.21% 72.06%      2.17s  2.80%  runtime.(*mheap).allocSpan
     0.15s  0.19% 72.25%      0.61s  0.79%  runtime.(*spanSet).pop
     0.14s  0.18% 72.43%      0.60s  0.77%  github.com/labstack/echo/v4.applyMiddleware
     0.14s  0.18% 72.61%     10.71s 13.83%  internal/runtime/maps.(*Map).growToSmall
     0.14s  0.18% 72.80%      2.85s  3.68%  net/http/httptest.(*ResponseRecorder).Write
     0.13s  0.17% 72.96%      2.39s  3.09%  bytes.(*Buffer).grow
     0.13s  0.17% 73.13%      4.28s  5.53%  runtime.(*mcentral).cacheSpan
     0.13s  0.17% 73.30%      0.72s  0.93%  runtime.(*mheap).freeSpanLocked
     0.13s  0.17% 73.47%      0.99s  1.28%  runtime.makeSpanClass (inline)
     0.13s  0.17% 73.63%      4.56s  5.89%  runtime.mapIterStart
     0.13s  0.17% 73.80%      0.49s  0.63%  runtime.mapaccess1_faststr
     0.13s  0.17% 73.97%     10.32s 13.32%  runtime.newarray
     0.12s  0.15% 74.13%     15.28s 19.73%  benchmarks/echo.BenchmarkDynamicRoute
     0.12s  0.15% 74.28%      2.87s  3.71%  encoding/json.mapEncoder.encode
     0.12s  0.15% 74.44%     10.93s 14.11%  net/textproto.MIMEHeader.Set (inline)
     0.11s  0.14% 74.58%      2.18s  2.81%  runtime.findRunnable
     0.10s  0.13% 74.71%     12.99s 16.77%  benchmarks/echo.BenchmarkTypedJSON.func1
     0.10s  0.13% 74.84%      4.24s  5.47%  github.com/labstack/echo/v4.(*DefaultBinder).BindBody
     0.10s  0.13% 74.96%      2.37s  3.06%  github.com/labstack/echo/v4.DefaultJSONSerializer.Deserialize
     0.09s  0.12% 75.08%      4.22s  5.45%  encoding/json.(*encodeState).reflectValue
     0.09s  0.12% 75.20%      0.45s  0.58%  encoding/json.newEncodeState
     0.09s  0.12% 75.31%      0.47s  0.61%  encoding/json.stringEncoder
     0.09s  0.12% 75.43%      0.79s  1.02%  github.com/labstack/echo/v4.NewHTTPError
     0.09s  0.12% 75.55%      6.45s  8.33%  runtime.(*mcache).nextFree
     0.09s  0.12% 75.66%      1.30s  1.68%  runtime.mapIterNext
     0.08s   0.1% 75.77%     12.89s 16.64%  benchmarks/echo.BenchmarkDynamicRoute.func1
     0.08s   0.1% 75.87%      1.47s  1.90%  encoding/json.(*Decoder).readValue
     0.08s   0.1% 75.97%     17.40s 22.47%  github.com/labstack/echo/v4.(*context).Blob
     0.08s   0.1% 76.07%     10.46s 13.51%  internal/runtime/maps.newGroups (inline)
     0.08s   0.1% 76.18%      0.79s  1.02%  reflect.copyVal
     0.08s   0.1% 76.28%      0.42s  0.54%  runtime.(*mspan).typePointersOfUnchecked
     0.08s   0.1% 76.38%      1.88s  2.43%  runtime.deductAssistCredit
     0.08s   0.1% 76.49%      0.78s  1.01%  runtime.forEachPInternal
     0.08s   0.1% 76.59%      3.10s  4.00%  runtime.makemap_small
     0.07s  0.09% 76.68%      1.33s  1.72%  encoding/json.(*Decoder).refill
     0.07s  0.09% 76.77%      4.57s  5.90%  github.com/labstack/echo/v4.(*DefaultBinder).Bind
     0.07s  0.09% 76.86%     10.18s 13.14%  github.com/labstack/echo/v4.(*context).writeContentType
     0.07s  0.09% 76.95%      0.74s  0.96%  runtime.gcmarknewobject
     0.07s  0.09% 77.04%      1.84s  2.38%  runtime.makemap
     0.06s 0.077% 77.12%      0.83s  1.07%  github.com/labstack/echo/v4.(*context).QueryParams (inline)
     0.06s 0.077% 77.20%     10.38s 13.40%  internal/runtime/maps.newarray
     0.06s 0.077% 77.28%      0.71s  0.92%  runtime.convTstring
     0.06s 0.077% 77.35%      8.43s 10.88%  runtime.gcDrain
     0.06s 0.077% 77.43%      0.58s  0.75%  runtime.notesleep
     0.06s 0.077% 77.51%      1.05s  1.36%  runtime.rawbyteslice
     0.06s 0.077% 77.59%      0.48s  0.62%  runtime.tracebackPCs
     0.05s 0.065% 77.65%     10.40s 13.43%  benchmarks/echo.BenchmarkStaticRoute.func1
     0.05s 0.065% 77.71%     14.71s 18.99%  benchmarks/echo.BenchmarkTypedJSON
     0.05s 0.065% 77.78%     18.61s 24.03%  github.com/labstack/echo/v4.(*context).String
     0.05s 0.065% 77.84%      1.77s  2.29%  internal/runtime/maps.NewMap
     0.05s 0.065% 77.91%      0.77s  0.99%  net/url.(*URL).Query
     0.05s 0.065% 77.97%      0.90s  1.16%  runtime.(*gcControllerState).update
     0.05s 0.065% 78.04%      1.16s  1.50%  runtime.stringtoslicebyte
     0.05s 0.065% 78.10%     18.48s 23.86%  runtime.systemstack
     0.04s 0.052% 78.15%      0.45s  0.58%  benchmarks/echo.BenchmarkMiddleware.func1
     0.04s 0.052% 78.21%     13.03s 16.82%  benchmarks/echo.BenchmarkStaticRoute
     0.04s 0.052% 78.26%     18.69s 24.13%  github.com/labstack/echo/v4.(*context).JSON
     0.04s 0.052% 78.31%     13.30s 17.17%  github.com/labstack/echo/v4.DefaultJSONSerializer.Serialize
     0.04s 0.052% 78.36%      2.26s  2.92%  runtime.(*mheap).alloc
     0.04s 0.052% 78.41%      0.79s  1.02%  runtime.futexsleep
     0.04s 0.052% 78.46%      2.24s  2.89%  runtime.markroot
     0.03s 0.039% 78.50%      0.87s  1.12%  reflect.(*MapIter).Next
     0.03s 0.039% 78.54%      0.63s  0.81%  reflect.unsafe_New
     0.03s 0.039% 78.58%      0.43s  0.56%  runtime.(*gcControllerState).enlistWorker
     0.03s 0.039% 78.62%      0.74s  0.96%  runtime.(*mcentral).uncacheSpan
     0.03s 0.039% 78.66%      0.60s  0.77%  runtime.(*mheap).nextSpanForSweep
     0.03s 0.039% 78.70%      0.51s  0.66%  runtime.newMarkBits
     0.03s 0.039% 78.73%      2.36s  3.05%  runtime.newstack
     0.03s 0.039% 78.77%      0.80s  1.03%  runtime.scanstack
     0.03s 0.039% 78.81%      1.13s  1.46%  runtime.startTheWorldWithSema
     0.03s 0.039% 78.85%      0.50s  0.65%  runtime.stopTheWorldWithSema
     0.03s 0.039% 78.89%      0.46s  0.59%  runtime.traceRelease (inline)
     0.03s 0.039% 78.93%      0.53s  0.68%  runtime.traceWriter.event
     0.02s 0.026% 78.95%     14.20s 18.33%  benchmarks/echo.BenchmarkMiddleware
     0.02s 0.026% 78.98%      8.28s 10.69%  benchmarks/echo.BenchmarkMiddleware.func2
     0.02s 0.026% 79.01%      1.53s  1.98%  encoding/json.(*Decoder).Decode
     0.02s 0.026% 79.03%      4.29s  5.54%  encoding/json.(*encodeState).marshal
     0.02s 0.026% 79.06%      0.51s  0.66%  encoding/json.valueEncoder
     0.02s 0.026% 79.08%      4.59s  5.93%  github.com/labstack/echo/v4.(*context).Bind
     0.02s 0.026% 79.11%      0.40s  0.52%  reflect.(*MapIter).Key
     0.02s 0.026% 79.13%      0.63s  0.81%  reflect.mapIterStart
     0.02s 0.026% 79.16%      0.47s  0.61%  runtime.(*gcWork).balance
     0.02s 0.026% 79.19%      2.21s  2.85%  runtime.(*mheap).alloc.func1
     0.02s 0.026% 79.21%      0.84s  1.08%  runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func2
     0.02s 0.026% 79.24%      0.58s  0.75%  runtime.callers.func1
     0.02s 0.026% 79.26%      1.79s  2.31%  runtime.gcAssistAlloc
     0.02s 0.026% 79.29%     10.42s 13.45%  runtime.gcBgMarkWorker
     0.02s 0.026% 79.32%      1.60s  2.07%  runtime.gcDrainN
     0.02s 0.026% 79.34%      1.86s  2.40%  runtime.gcMarkDone
     0.02s 0.026% 79.37%      1.69s  2.18%  runtime.gcStart
     0.02s 0.026% 79.39%      0.68s  0.88%  runtime.mProf_Malloc
     0.02s 0.026% 79.42%      0.82s  1.06%  runtime.stopm
     0.02s 0.026% 79.44%      0.70s   0.9%  runtime.traceAcquire (inline)
     0.02s 0.026% 79.47%      1.14s  1.47%  runtime.wbBufFlush
     0.01s 0.013% 79.48%      0.74s  0.96%  encoding/json.NewDecoder (inline)
     0.01s 0.013% 79.50%      3.02s  3.90%  internal/runtime/maps.NewEmptyMap (inline)
     0.01s 0.013% 79.51%      5.11s  6.60%  net/http/httptest.NewRecorder (inline)
     0.01s 0.013% 79.52%      0.71s  0.92%  net/url.ParseQuery (inline)
     0.01s 0.013% 79.54%      0.42s  0.54%  reflect.(*MapIter).Value
     0.01s 0.013% 79.55%      3.17s  4.09%  runtime.(*mcentral).grow
     0.01s 0.013% 79.56%      0.90s  1.16%  runtime.(*mspan).initHeapBits
     0.01s 0.013% 79.57%      0.52s  0.67%  runtime.(*scavengerState).init.func2
     0.01s 0.013% 79.59%      0.54s   0.7%  runtime.(*scavengerState).run
     0.01s 0.013% 79.60%      0.61s  0.79%  runtime.(*unwinder).next
     0.01s 0.013% 79.61%      0.59s  0.76%  runtime.callers
     0.01s 0.013% 79.63%      0.46s  0.59%  runtime.finishsweep_m
     0.01s 0.013% 79.64%      3.74s  4.83%  runtime.futexwakeup
     0.01s 0.013% 79.65%      0.86s  1.11%  runtime.gcStart.func4
     0.01s 0.013% 79.66%      2.10s  2.71%  runtime.goschedImpl
     0.01s 0.013% 79.68%      0.59s  0.76%  runtime.mPark (inline)
     0.01s 0.013% 79.69%      3.53s  4.56%  runtime.notewakeup
     0.01s 0.013% 79.70%      0.73s  0.94%  runtime.preemptone
     0.01s 0.013% 79.72%         4s  5.16%  runtime.schedule
     0.01s 0.013% 79.73%      0.85s  1.10%  runtime.signalM
     0.01s 0.013% 79.74%      3.01s  3.89%  runtime.wakep
         0     0% 79.74%     11.32s 14.62%  benchmarks/echo.BenchmarkMiddleware.func1.1
         0     0% 79.74%      0.49s  0.63%  encoding/json.typeEncoder
         0     0% 79.74%      2.52s  3.25%  net/http.Header.Get (inline)
         0     0% 79.74%     10.93s 14.11%  net/http.Header.Set (inline)
         0     0% 79.74%      0.85s  1.10%  runtime.(*mheap).freeSpan (inline)
         0     0% 79.74%      0.50s  0.65%  runtime.(*pageAlloc).scavenge
         0     0% 79.74%      0.50s  0.65%  runtime.(*pageAlloc).scavenge.func1
         0     0% 79.74%      0.50s  0.65%  runtime.(*pageAlloc).scavengeOne
         0     0% 79.74%      0.57s  0.74%  runtime.bgscavenge
         0     0% 79.74%      3.73s  4.82%  runtime.bgsweep
         0     0% 79.74%      0.80s  1.03%  runtime.forEachP (inline)
         0     0% 79.74%      1.68s  2.17%  runtime.gcAssistAlloc.func2
         0     0% 79.74%      1.68s  2.17%  runtime.gcAssistAlloc1
         0     0% 79.74%      8.43s 10.88%  runtime.gcBgMarkWorker.func2
         0     0% 79.74%      8.18s 10.56%  runtime.gcDrainMarkWorkerDedicated (inline)
         0     0% 79.74%      0.60s  0.77%  runtime.gcMarkDone.forEachP.func5
         0     0% 79.74%      0.76s  0.98%  runtime.gcMarkTermination
         0     0% 79.74%      0.46s  0.59%  runtime.gcStart.func3
         0     0% 79.74%      2.07s  2.67%  runtime.gopreempt_m (inline)
         0     0% 79.74%      0.51s  0.66%  runtime.lock (inline)
         0     0% 79.74%      0.51s  0.66%  runtime.lockWithRank (inline)
         0     0% 79.74%      1.07s  1.38%  runtime.markroot.func1
         0     0% 79.74%      1.05s  1.36%  runtime.markrootBlock
         0     0% 79.74%      2.79s  3.60%  runtime.mcall
         0     0% 79.74%      2.01s  2.60%  runtime.morestack
         0     0% 79.74%      2.76s  3.56%  runtime.park_m
         0     0% 79.74%      0.87s  1.12%  runtime.preemptM (inline)
         0     0% 79.74%      0.71s  0.92%  runtime.profilealloc
         0     0% 79.74%      1.63s  2.10%  runtime.resetspinning
         0     0% 79.74%      0.69s  0.89%  runtime.runSafePointFn
         0     0% 79.74%      2.95s  3.81%  runtime.startm
         0     0% 79.74%      0.44s  0.57%  runtime.sysUnused (inline)
         0     0% 79.74%      0.44s  0.57%  runtime.sysUnusedOS
         0     0% 79.74%      0.54s   0.7%  runtime.traceEventWriter.event
         0     0% 79.74%      0.39s   0.5%  runtime.traceLocker.HeapAlloc
         0     0% 79.74%      0.49s  0.63%  runtime.unlock (inline)
         0     0% 79.74%      0.49s  0.63%  runtime.unlockWithRank (inline)
         0     0% 79.74%      1.11s  1.43%  runtime.wbBufFlush.func1
         0     0% 79.74%      0.49s  0.63%  sync.(*Map).Load (inline)
         0     0% 79.74%     57.25s 73.92%  testing.(*B).launch
         0     0% 79.74%     57.27s 73.94%  testing.(*B).runN
